unit UShop;

interface
uses USimulation;

// Моделирование работы магазина

type
  // Класс TCustomer - покупатель
  TCustomer = class(TProcess)
  private
    BuysCount : Integer;
  protected
    procedure RunProcess; override;
  end;

  // Класс TCashman - кассир
  TCashman = class(TProcess)
  protected
    procedure RunProcess; override;
  public
    Busy : Boolean;
    constructor Create;
  end;

  // Класс TGenerator - генератор покупателей
  TGenerator = class(TProcess)
  protected
    procedure RunProcess; override;
  end;

  // Класс TShop - имитация работы магазина
  TShop = class(TSimulation)
  public
    Queue : TList;
    Cash : TCashman;
    CashStat : TServiceStatistics;
    TimeStat : TStatistics;
    PeopleStat : TActionStatistics;
    destructor Destroy; override;
    procedure StopStat; override;
  private
    Generator : TGenerator;
  protected
    procedure Init; override;
    procedure RunSimulation; override;
  end;

var
  // Генераторы случайных чисел
  rndCust,                 // Прибытие покупателей
  rndService : TRandom;    // Время обслуживания
  MinShoppingTime : Double = 10;
  MaxShoppingTime : Double = 20;
  MinBuysCount : Integer = 4;
  MaxBuysCount : Integer = 13;
  MeanCustInterval : Double = 5;
  TimePerBuy : Double = 0.5;
  SimulationTime : Double = 480;

implementation

{ TCustomer }

procedure TCustomer.RunProcess;
var
  par : TShop;
begin
  par := Parent as TShop;
  BuysCount := rndService.NextInt(MinBuysCount, MaxBuysCount);
  StartRunning;
  // Выбор покупок
  par.PeopleStat.Start(SimTime);
  Hold(rndService.Uniform(MinShoppingTime, MaxShoppingTime));
  par.PeopleStat.Finish(SimTime);
  // Встать в очередь к кассе
  InsertLast(par.Queue);
  // Активировать кассира
  par.Cash.ActivateDelay(0);
  // Ожидать
  Passivate;

  // Покупатель встал в очередь и перешел в пассивное состояние,
  //   отметив время входа и "толкнув" кассира

end;

{ TCashman }

constructor TCashman.Create;
begin
  inherited Create;
end;

procedure TCashman.RunProcess;
var
  Cust : TCustomer;
  par : TShop;
begin
  par := Parent as TShop;
  while True do
  begin
    while not par.Queue.Empty do
    begin
      // ОБратиться к очередному покупателю
      Cust := par.Queue.First as TCustomer;
      // Извлечь из очереди
      Cust.StartRunning;
      // Кассир занят
      par.CashStat.Start(SimTime);
      // Рассчитать покупателя
      Hold(Cust.BuysCount * TimePerBuy);
      // Покупатель обслужен - кассир свободен
      par.CashStat.Finish(SimTime);
      par.TimeStat.AddData(SimTime - Cust.StartingTime);
      // Активировать его завершение
      Cust.Finish;

      // Кассир обслужил покупателя, удалил его из очереди
      //   и активировал покупателя, дав ему возможность
      //   продолжить свои действия
    end;
    // Ждать очередного покупателя
    Passivate;
  end;
end;

{ TGenerator }

procedure TGenerator.RunProcess;
var
  par : TShop;
begin
  par := Parent as TShop;
  while True do
  begin
    ClearFinished;
    // Создать нового покупателя и поместить его в систему
    TCustomer.Create.ActivateDelay(0);
    // Подождать перед созданием следующего
    Hold(rndCust.Exponential(MeanCustInterval));
  end;
end;

{ TShop }

destructor TShop.Destroy;
begin
  Cash.Free;
  Generator.Free;
  CashStat.Free;
  TimeStat.Free;
  PeopleStat.Free;
  Queue.Free;
  inherited;
end;

procedure TShop.Init;
begin
  inherited;
  CashStat := TServiceStatistics.Create(1, 0, 0);
  PeopleStat := TActionStatistics.Create(0, 0);
  Queue := TList.Create;
  Cash := TCashman.Create;
  Generator := TGenerator.Create;
  TimeStat := TStatistics.Create;
end;

procedure TShop.RunSimulation;
begin
  // Запустить генератор
  Generator.ActivateDelay(0);
  // Запустить кассира
  Cash.ActivateDelay(0);
  // Ждать окончания моделирования
  Hold(SimulationTime);
  // Закончить статистику
  StopStat;
end;

procedure TShop.StopStat;
begin
  inherited;
  CashStat.StopStat(SimTime);
  Queue.StopStat(SimTime);
  PeopleStat.StopStat(SimTime);
end;

end.
