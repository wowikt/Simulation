unit UBank;

interface
uses USimulation;

type
  // Класс TClient - процесс, моделирующий клиента банка
  TClient = class(TProcess)
  protected
    procedure RunProcess; override;
  end;

  // Класс TClientGenerator - процесс, порождающий клиентов банка
  TClientGenerator = class(TProcess)
  protected
    procedure RunProcess; override;
  end;

  // Класс TCashman - процесс, моделирующий работу кассира
  TCashman = class(TProcess)
  protected
    procedure RunProcess; override;
  end;

  // Класс TBankSimulation - моделирование работы банка
  TBankSimulation = class(TSimulation)
  public
    // Кассир
    Cashman : TCashman;
    // Генератор клиентов
    Generator : TClientGenerator;
    // Очередь ожидания
    Queue : TList;
    // Статистика и гистограмма по времени пребывания
    //   клиентов в банке
    InBankTime : TStatistics;
    InBankHist : THistogram;
    // Статистика по занятости кассира
    CashStat : TServiceStatistics;
    // Счетчик клиентов, обслуженных без ожидания
    NotWaited : Integer;
    destructor Destroy; override;
    procedure StopStat; override;
  protected
    procedure RunSimulation; override;
    procedure Init; override;
  end;

var
  // Датчики случайных чисел
  rndClient : TRandom;
  rndCashman : TRandom;
  // Количество обслуживаемых клиентов
  MaxClientCount : Integer = 100;
  // Средний интервал между прибытием клиентов
  MeanClientInterval : Double = 5;
  // Границы времени обслуживания
  MinCashTime : Double = 2;
  MaxCashTime : Double = 6;
  // Параметры гистограммы
  HistMin : Double = 2;
  HistStep : Double = 2;
  HistStepCount : Integer = 20;

implementation

{ TClient }

procedure TClient.RunProcess;
var
  par : TBankSimulation;
begin
  par := Parent as TBankSimulation;
  // Активировать кассу
  par.Cashman.ActivateDelay(0);
  // Встать в очередь и ждать обслуживания
  Wait(par.Queue);
  // Встать в очередь завершенных процессов
  Finish;
end;

{ TClientGenerator }

procedure TClientGenerator.RunProcess;
var
  i : Integer;
begin
  for i := 1 to MaxClientCount do
  begin
    ClearFinished;
    TClient.Create.ActivateDelay(0);
    Hold(rndClient.Exponential(MeanClientInterval));
  end;
end;

{ TCashman }

procedure TCashman.RunProcess;
var
  Client : TClient;
  InTime : Double;
  par : TBankSimulation;
begin
  par := Parent as TBankSimulation;
  while True do
  begin
    // Если очередь пуста, ждать прибытия клиента
    while par.Queue.Empty do
      Passivate;

    // Извлечь первого клиента из очереди
    Client := par.Queue.First as TClient;
    Client.StartRunning;

    // Если клиент не ждал, учесть его
    if Client.StartingTime = SimTime then
      Inc(par.NotWaited);

    // Выполнить обслуживание
    par.CashStat.Start(SimTime);
    Hold(rndCashman.Uniform(MinCashTime, MaxCashTime));
    par.CashStat.Finish(SimTime);

    // Учесть полное время пребывания в банке
    InTime := SimTime - Client.StartingTime;
    par.InBankTime.AddData(InTime);
    par.InBankHist.AddData(InTime);

    // Возобновить клиента, дав ему возможность
    //   закончить работу
    Client.ActivateDelay(0);

    // Если все клиенты обслужены, завершить работу
    if par.CashStat.Finished = MaxClientCount then
      par.ActivateDelay(0);
  end;
end;

{ TBankSimulation }

destructor TBankSimulation.Destroy;
begin
  Cashman.Free;
  Generator.Free;
  InBankTime.Free;
  InBankHist.Free;
  CashStat.Free;
  Queue.Free;
  inherited;
end;

procedure TBankSimulation.Init;
begin
  inherited;
  Queue := TList.Create;
  Cashman := TCashman.Create;
  Generator := TClientGenerator.Create;
  InBankTime := TStatistics.Create;
  CashStat := TServiceStatistics.Create(1);
  InBankHist := TUniformHistogram.Create(HistMin, HistStep, HistStepCount);
  NotWaited := 0;
end;

procedure TBankSimulation.RunSimulation;
begin
  // Запустить процесс создания клиентов
  Generator.ActivateDelay(0);
  // Ждать конца имитации
  Passivate;
  StopStat;
end;

procedure TBankSimulation.StopStat;
begin
  inherited;
  Queue.StopStat(SimTime);
  CashStat.StopStat(SimTime);
end;

end.
