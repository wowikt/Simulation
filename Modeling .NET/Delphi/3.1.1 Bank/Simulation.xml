<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Simulation</name>
    </assembly>
    <members>
        <member name="T:Simulation.ProcessEventNotice">
            <summary>
            Класс уведомленияо событии, связанном с возобновлением процесса
            </summary>
        </member>
        <member name="T:Simulation.EventNotice">
            <summary>
            Класс EventNotice - ячейка календаря событий
            </summary>
        </member>
        <member name="T:Simulation.Link">
            <summary>
            Класс Link - базовый класс внутреннего узла (ячейки) списка
            </summary>
        </member>
        <member name="T:Simulation.ILink">
            <summary>
            Интерфейс ILink содержит определения, обязательные для любых объектов, которые могут быть вставлены в список
            </summary>
        </member>
        <member name="T:Simulation.ILinkage">
            <summary>
            Интерфейс ILinkage - базовый для построения связных списков и многих объектов моделирования
            </summary>
        </member>
        <member name="M:Simulation.ILinkage.Finish">
            <summary>
            Заготовка для метода завершения работы объекта.
            </summary>
        </member>
        <member name="M:Simulation.ILinkage.GetNext">
            <summary>
            Получение ссылки на следующий узел списка независимо от того, является он внутренней или заголовочной ячейкой
            </summary>
            <returns>Ссылка на следующий узел</returns>
        </member>
        <member name="M:Simulation.ILinkage.GetPrev">
            <summary>
            Получение ссылки на предыдущий узел списка независимо от того, является он внутренней или заголовочной ячейкой
            </summary>
            <returns>Ссылка на предыдущий узел</returns>
        </member>
        <member name="M:Simulation.ILinkage.SetNext(Simulation.ILinkage)">
            <summary>
            Установка ссылки на следующий узел списка
            </summary>
            <param name="newNext">Новая ссылка на следующий узел</param>
        </member>
        <member name="M:Simulation.ILinkage.SetPrev(Simulation.ILinkage)">
            <summary>
            Установка ссылки на предыдущий узел списка
            </summary>
            <param name="newPrev">Новая ссылка на предыдущий узел</param>
        </member>
        <member name="P:Simulation.ILinkage.Header">
            <summary>
            Ссылка на заголовочную ячейку списка
            </summary>
        </member>
        <member name="P:Simulation.ILinkage.Prev">
            <summary>
            Только для чтения. Ссылка на предыдущий узел, 
            если он является внутренней ячейкой списка.
            В противном случае - null.
            </summary>
        </member>
        <member name="P:Simulation.ILinkage.Next">
            <summary>
            Только для чтения. Ссылка на следующий узел, 
            если он является внутренней ячейкой списка.
            В пртивном случае - null.
            </summary>
        </member>
        <member name="M:Simulation.ILink.GetHeader">
            <summary>
            Возвращает ссылку на заголовочную ячейку списка, в котором находится узел
            </summary>
            <returns>Ссылка на заголовочную ячейку</returns>
        </member>
        <member name="M:Simulation.ILink.Insert(Simulation.List)">
            <summary>
            Вставка узла в список. 
            Если для узла задана собственная функция сравнения, вставка производится с ее использованием.
            В противном случае узел вставляется в список последним
            </summary>
            <param name="l">Ссылка на заголовочную ячейку списка, в который вставляется текущий узел</param>
        </member>
        <member name="M:Simulation.ILink.Insert(Simulation.List,Simulation.CompareFunction)">
            <summary>
            Вставка узла в список с использованием указанной функции сравнения
            </summary>
            <param name="l">Ссылка на заголовочную ячейку списка, в который вставляется узел</param>
            <param name="cmp">Функция сравнения, которую следует использоватьпри вставке узла</param>
        </member>
        <member name="M:Simulation.ILink.InsertAfter(Simulation.ILinkage)">
            <summary>
            Вставка узла в список после указанного
            </summary>
            <param name="l">Узел, после которого следует вставлять текущий</param>
        </member>
        <member name="M:Simulation.ILink.InsertBefore(Simulation.ILinkage)">
            <summary>
            Вставка узла в список перед указанным
            </summary>
            <param name="l">Узел, перед которым следует вставлять текущий</param>
        </member>
        <member name="M:Simulation.ILink.InsertFirst(Simulation.List)">
            <summary>
            Вставка узла в первую позицию списка
            </summary>
            <param name="l">Ссылка на заголовочную ячейку списка, в который вставляется узел</param>
        </member>
        <member name="M:Simulation.ILink.InsertLast(Simulation.List)">
            <summary>
            Вставка узла в последнюю позицию списка
            </summary>
            <param name="l">Ссылка на заголовочную ячейку списка, в который вставляется узел</param>
        </member>
        <member name="M:Simulation.ILink.Remove">
            <summary>
            Исключение узла из списка, в котором он находится
            </summary>
        </member>
        <member name="P:Simulation.ILink.InsertTime">
            <summary>
            Имитационное время вставки узла в список.
            Используется для сбора статистики по времени нахождения узлов в списке.
            </summary>
        </member>
        <member name="P:Simulation.ILink.IsFirst">
            <summary>
            Проверка, является ли ячейка первой в списке
            </summary>
        </member>
        <member name="P:Simulation.ILink.IsLast">
            <summary>
            Проверка, является ли ячейка последней в списке
            </summary>
        </member>
        <member name="M:Simulation.Link.#ctor">
            <summary>
            Конструктор по умолчанию. Создается ячейка, не включенная ни в один список
            </summary>
        </member>
        <member name="F:Simulation.Link.FPrev">
            <summary>
            Поле связи. Ссылка на предыдущий узел списка
            </summary>
        </member>
        <member name="F:Simulation.Link.FNext">
            <summary>
            Поле связи. Ссылка на следующий узел списка
            </summary>
        </member>
        <member name="M:Simulation.Link.Finish">
            <summary>
            Завершение работы узла. Узел исключается из списка.
            В переопределенном методе производного класса 
            ПОСЛЕДНИМ оператором должен быть base.Finish();
            </summary>
        </member>
        <member name="M:Simulation.Link.GetHeader">
            <summary>
            Возвращает ссылку на заголовочную ячейку списка, в котором находится узел
            </summary>
            <returns>Ссылка на заголовочную ячейку</returns>
        </member>
        <member name="M:Simulation.Link.GetNext">
            <summary>
            Получение ссылки на следующий узел списка независимо от того, является он внутренней или заголовочной ячейкой
            </summary>
            <returns>Ссылка на следующий узел</returns>
        </member>
        <member name="M:Simulation.Link.GetPrev">
            <summary>
            Получение ссылки на предыдущий узел списка независимо от того, является он внутренней или заголовочной ячейкой
            </summary>
            <returns>Ссылка на предыдущий узел</returns>
        </member>
        <member name="M:Simulation.Link.Insert(Simulation.List)">
            <summary>
            Вставка узла в список. 
            Если для узла задана собственная функция сравнения, вставка производится с ее использованием.
            В противном случае узел вставляется в список последним
            </summary>
            <param name="l">Ссылка на заголовочную ячейку списка, в который вставляется текущий узел</param>
        </member>
        <member name="M:Simulation.Link.Insert(Simulation.List,Simulation.CompareFunction)">
            <summary>
            Вставка узла в список с использованием указанной функции сравнения
            </summary>
            <param name="l">Ссылка на заголовочную ячейку списка, в который вставляется узел</param>
            <param name="cmp">Функция сравнения, которую следует использоватьпри вставке узла</param>
        </member>
        <member name="M:Simulation.Link.InsertAfter(Simulation.ILinkage)">
            <summary>
            Вставка узла в список после указанного
            </summary>
            <param name="l">Узел, после которого следует вставлять текущий</param>
        </member>
        <member name="M:Simulation.Link.InsertBefore(Simulation.ILinkage)">
            <summary>
            Вставка узла в список перед указанным
            </summary>
            <param name="l">Узел, перед которым следует вставлять текущий</param>
        </member>
        <member name="M:Simulation.Link.InsertFirst(Simulation.List)">
            <summary>
            Вставка узла в первую позицию списка
            </summary>
            <param name="l">Ссылка на заголовочную ячейку списка, в который вставляется узел</param>
        </member>
        <member name="M:Simulation.Link.InsertLast(Simulation.List)">
            <summary>
            Вставка узла в последнюю позицию списка
            </summary>
            <param name="l">Ссылка на заголовочную ячейку списка, в который вставляется узел</param>
        </member>
        <member name="M:Simulation.Link.Remove">
            <summary>
            Исключение узла из списка, в котором он находится
            </summary>
        </member>
        <member name="M:Simulation.Link.SetNext(Simulation.ILinkage)">
            <summary>
            Установка ссылки на следующий узел списка
            </summary>
            <param name="newNext">Новая ссылка на следующий узел</param>
        </member>
        <member name="M:Simulation.Link.SetPrev(Simulation.ILinkage)">
            <summary>
            Установка ссылки на предыдущий узел списка
            </summary>
            <param name="newPrev">Новая ссылка на предыдущий узел</param>
        </member>
        <member name="P:Simulation.Link.Header">
            <summary>
            Ссылка на заголовочную ячейку списка
            </summary>
        </member>
        <member name="P:Simulation.Link.InsertTime">
            <summary>
            Имитационное время вставки узла в список.
            Используется для сбора статистики по времени нахождения узлов в списке.
            </summary>
        </member>
        <member name="P:Simulation.Link.IsFirst">
            <summary>
            Проверка, является ли ячейка первой в списке
            </summary>
        </member>
        <member name="P:Simulation.Link.IsLast">
            <summary>
            Проверка, является ли ячейка последней в списке
            </summary>
        </member>
        <member name="P:Simulation.Link.Prev">
            <summary>
            Только для чтения. Ссылка на предыдущий узел, 
            если он является внутренней ячейкой списка.
            В противном случае - null.
            </summary>
        </member>
        <member name="P:Simulation.Link.Next">
            <summary>
            Только для чтения. Ссылка на следующий узел, 
            если он является внутренней ячейкой списка.
            В пртивном случае - null.
            </summary>
        </member>
        <member name="M:Simulation.EventNotice.#ctor(System.Double)">
            <summary>
            Конструктор. Записывает значения параметров в поля объекта
            </summary>
            <param name="time">Время наступления события</param>
        </member>
        <member name="F:Simulation.EventNotice.EventTime">
            <summary>
            Имитационное время наступления события
            </summary>
        </member>
        <member name="M:Simulation.EventNotice.InsertPrior(Simulation.List)">
            <summary>
            Вставка в календарь событий до всех уведомлений с тем же значением времени
            </summary>
            <param name="l">Календарь событий</param>
        </member>
        <member name="M:Simulation.EventNotice.PriorCompFunc(Simulation.ILink,Simulation.ILink)">
            <summary>
            Функция сравнения для вставки с приоритетом уведомления о событиях в календарь
            </summary>
            <param name="a">Ссылка на вставляемое уведомление</param>
            <param name="b">Ссылка на очередное уведомление в списке</param>
            <returns>true, если ячейка a может быть вставлена перед ячейкой b</returns>
        </member>
        <member name="M:Simulation.EventNotice.RunEvent">
            <summary>
            Обработка очередного события
            </summary>
        </member>
        <member name="M:Simulation.EventNotice.SetTime(System.Double)">
            <summary>
            Изменение времени наступления события и перестановка уведомления в календаре
            после всех уведомлений с равным временем наступления события
            </summary>
            <param name="newTime">Новое время наступления события</param>
        </member>
        <member name="M:Simulation.EventNotice.SetTimePrior(System.Double)">
            <summary>
            Изменение времени наступления события и перестановка уведомления в календаре
            до всех уведомлений с равным временем наступления события
            </summary>
            <param name="newTime">Новое время наступления события</param>
        </member>
        <member name="M:Simulation.ProcessEventNotice.#ctor(System.Double,Simulation.Process)">
            <summary>
            Конструктор. Записывает значения параметров в поля объекта
            </summary>
            <param name="time">Время наступления события</param>
            <param name="proc">Процесс, активируемый при наступлении события</param>
        </member>
        <member name="F:Simulation.ProcessEventNotice.Proc">
            <summary>
            Процесс, который активируется при наступлении события
            </summary>
        </member>
        <member name="M:Simulation.ProcessEventNotice.RunEvent">
            <summary>
            Обработка события, связанного с процессом
            </summary>
        </member>
        <member name="M:Simulation.ProcessEventNotice.ToString">
            <summary>
            Отображение содержимого уведомления о событии в текстовом виде
            </summary>
            <returns>Класс процесса и время запланированного события</returns>
        </member>
        <member name="T:Simulation.Process">
            <summary>
            Класс Process - базовый класс процесса, выполняемого при исполнении имитации
            </summary>
        </member>
        <member name="T:Simulation.Coroutine">
            <summary>
            Класс <c>Coroutine</c> - базовый класс для построения сопрограмм
            </summary>
        </member>
        <member name="M:Simulation.Coroutine.#ctor">
            <summary>
            Конструктор. 
            <para>Создает всю необходимую инфраструктуру и обеспечивает исполнение начального фрагмента алгоритма</para>
            </summary>
        </member>
        <member name="F:Simulation.Coroutine.FNext">
            <summary>
            Поле связи. Ссылка на следующий узел списка
            </summary>
        </member>
        <member name="F:Simulation.Coroutine.FPrev">
            <summary>
            Поле связи. Ссылка на предыдущий узел списка
            </summary>
        </member>
        <member name="F:Simulation.Coroutine.Owner">
            <summary>
            Сопрограмма-владелец текущей или null, если владельцем является главный поток
            </summary>
        </member>
        <member name="F:Simulation.Coroutine.TerminatedState">
            <summary>
            Поле, указывающее на завершенное состояние сопрограммы. 
            Доступно для чтения посредством свойства <c>Terminated</c>.
            </summary>
        </member>
        <member name="M:Simulation.Coroutine.Detach">
            <summary>
            Переключение к сопрограмме-владельцу
            </summary>
        </member>
        <member name="M:Simulation.Coroutine.Execute">
            <summary>
            Основной алгоритм работы сопрограммы. 
            <para>Должен переопределяться в производных классах.
            В данном классе ничего не делает.</para>
            </summary>
        </member>
        <member name="M:Simulation.Coroutine.Finish">
            <summary>
            Завершение работы узла. Узел исключается из списка.
            В переопределенном методе производного класса 
            ПОСЛЕДНИМ оператором должен быть base.Finish();
            </summary>
        </member>
        <member name="M:Simulation.Coroutine.GetHeader">
            <summary>
            Возвращает ссылку на заголовочную ячейку списка, в котором находится узел
            </summary>
            <returns>Ссылка на заголовочную ячейку</returns>
        </member>
        <member name="M:Simulation.Coroutine.GetNext">
            <summary>
            Получение ссылки на следующий узел списка независимо от того, является он внутренней или заголовочной ячейкой
            </summary>
            <returns>Ссылка на следующий узел</returns>
        </member>
        <member name="M:Simulation.Coroutine.GetPrev">
            <summary>
            Получение ссылки на предыдущий узел списка независимо от того, является он внутренней или заголовочной ячейкой
            </summary>
            <returns>Ссылка на предыдущий узел</returns>
        </member>
        <member name="M:Simulation.Coroutine.Insert(Simulation.List)">
            <summary>
            Вставка узла в список. 
            Если для узла задана собственная функция сравнения, вставка производится с ее использованием.
            В противном случае узел вставляется в список последним
            </summary>
            <param name="l">Ссылка на заголовочную ячейку списка, в который вставляется текущий узел</param>
        </member>
        <member name="M:Simulation.Coroutine.Insert(Simulation.List,Simulation.CompareFunction)">
            <summary>
            Вставка узла в список с использованием указанной функции сравнения
            </summary>
            <param name="l">Ссылка на заголовочную ячейку списка, в который вставляется узел</param>
            <param name="cmp">Функция сравнения, которую следует использоватьпри вставке узла</param>
        </member>
        <member name="M:Simulation.Coroutine.InsertAfter(Simulation.ILinkage)">
            <summary>
            Вставка узла в список после указанного
            </summary>
            <param name="l">Узел, после которого следует вставлять текущий</param>
        </member>
        <member name="M:Simulation.Coroutine.InsertBefore(Simulation.ILinkage)">
            <summary>
            Вставка узла в список перед указанным
            </summary>
            <param name="l">Узел, перед которым следует вставлять текущий</param>
        </member>
        <member name="M:Simulation.Coroutine.InsertFirst(Simulation.List)">
            <summary>
            Вставка узла в первую позицию списка
            </summary>
            <param name="l">Ссылка на заголовочную ячейку списка, в который вставляется узел</param>
        </member>
        <member name="M:Simulation.Coroutine.InsertLast(Simulation.List)">
            <summary>
            Вставка узла в последнюю позицию списка
            </summary>
            <param name="l">Ссылка на заголовочную ячейку списка, в который вставляется узел</param>
        </member>
        <member name="M:Simulation.Coroutine.Remove">
            <summary>
            Исключение узла из списка, в котором он находится
            </summary>
        </member>
        <member name="M:Simulation.Coroutine.Run">
            <summary>
            <para>Метод, обеспечивающий исполнение потока сопрограммы. Организует исполнение метода Run() в контесте сопрограммы.</para>
            <para>Никогда не должен переопределяться.</para>
            </summary>
        </member>
        <member name="M:Simulation.Coroutine.SetNext(Simulation.ILinkage)">
            <summary>
            Установка ссылки на следующий узел списка
            </summary>
            <param name="newNext">Новая ссылка на следующий узел</param>
        </member>
        <member name="M:Simulation.Coroutine.SetPrev(Simulation.ILinkage)">
            <summary>
            Установка ссылки на предыдущий узел списка
            </summary>
            <param name="newPrev">Новая ссылка на предыдущий узел</param>
        </member>
        <member name="M:Simulation.Coroutine.SwitchTo">
            <summary>
            Переключение к данной сопрограмме
            </summary>
        </member>
        <member name="M:Simulation.Coroutine.SwitchTo(Simulation.Coroutine)">
            <summary>
            Переключение к заданной сопрограмме
            </summary>
            <param name="cor">Активируемая сопрограмма</param>
        </member>
        <member name="P:Simulation.Coroutine.Header">
            <summary>
            Ссылка на заголовочную ячейку списка
            </summary>
        </member>
        <member name="P:Simulation.Coroutine.InsertTime">
            <summary>
            Имитационное время вставки узла в список.
            Используется для сбора статистики по времени нахождения узлов в списке.
            </summary>
        </member>
        <member name="P:Simulation.Coroutine.IsFirst">
            <summary>
            Проверка, является ли ячейка первой в списке
            </summary>
        </member>
        <member name="P:Simulation.Coroutine.IsLast">
            <summary>
            Проверка, является ли ячейка последней в списке
            </summary>
        </member>
        <member name="P:Simulation.Coroutine.Next">
            <summary>
            Только для чтения. Ссылка на следующий узел, 
            если он является внутренней ячейкой списка.
            В пртивном случае - null.
            </summary>
        </member>
        <member name="P:Simulation.Coroutine.Prev">
            <summary>
            Только для чтения. Ссылка на предыдущий узел, 
            если он является внутренней ячейкой списка.
            В противном случае - null.
            </summary>
        </member>
        <member name="P:Simulation.Coroutine.Terminated">
            <summary>
            Указывает, завершена ли работа сопрограммы
            </summary>
        </member>
        <member name="T:Simulation.ISchedulable">
            <summary>
            Интерфейс ISchedulable является базовым для классов объектов, для которых возможны манипуляции
             с уведомлениями о событиях (удаление, перемещение и т. п.). Производный от IActivatable
            </summary>
        </member>
        <member name="T:Simulation.IActivatable">
            <summary>
            Интерфейс IActivatable является базовым для классов объектов, которые могут быть
            запланированы в календаре (процессы, событийные объекты)
            </summary>
        </member>
        <member name="M:Simulation.IActivatable.Activate">
            <summary>
            Помещает запись уведомления об активации процесса непосредственно после текущего.
            <para>Если процесс находится в активном или приостановленном состоянии, ничего не делает</para>
            </summary>
        </member>
        <member name="M:Simulation.IActivatable.ActivateAfter(Simulation.ISchedulable)">
            <summary>
            Создает запись уведомления об активации процесса непосредственно после записи указанного процесса
            <para>Если процесс находится в активном или приостановленном состоянии, ничего не делает</para>
            <para>Если процесс-параметр находится в пассивном или завершенном состоянии, порождается исключение</para>
            </summary>
            <param name="act">Процесс, после которого следует активировать данный</param>
        </member>
        <member name="M:Simulation.IActivatable.ActivateAt(System.Double)">
            <summary>
            Создает запись уведомления об активации процесса в указанное время
            <para>Если процесс находится в активном или приостановленном состоянии, ничего не делает</para>
            </summary>
            <param name="t">Имитационное время активации процесса</param>
        </member>
        <member name="M:Simulation.IActivatable.ActivateBefore(Simulation.ISchedulable)">
            <summary>
            Создает запись уведомления об активации процесса непосредственно перед записью указанного процесса
            <para>Если процесс находится в активном или приостановленном состоянии, ничего не делает</para>
            <para>Если процесс-параметр находится в пассивном или завершенном состоянии, порождается исключение</para>
            </summary>
            <param name="act">Процесс, перед которым следует активировать данный</param>
        </member>
        <member name="M:Simulation.IActivatable.ActivateDelay(System.Double)">
            <summary>
            Создает запись уведомления об активации процесса с указанной задержкой времени
            <para>Если процесс находится в активном или приостановленном состоянии, ничего не делает</para>
            </summary>
            <param name="dt">Задержка относительно текущего имитационного времени</param>
        </member>
        <member name="M:Simulation.IActivatable.ActivatePriorAt(System.Double)">
            <summary>
            Создает запись уведомления об активации процесса в указанное время с приоритетом по отношению к процессам,
            запланированным ранее на то же время
            <para>Если процесс находится в активном или приостановленном состоянии, ничего не делает</para>
            </summary>
            <param name="t">Имитационное время активации процесса</param>
        </member>
        <member name="M:Simulation.IActivatable.ActivatePriorDelay(System.Double)">
            <summary>
            Создает запись уведомления об активации процесса с указанной задержкой времени с приоритетом по отношению к процессам,
            запланированным ранее на то же время
            <para>Если процесс находится в активном или приостановленном состоянии, ничего не делает</para>
            </summary>
            <param name="dt">Задержка относительно текущего имитационного времени</param>
        </member>
        <member name="M:Simulation.ISchedulable.Passivate">
            <summary>
            Переводит процесс в пассивное состояние, удаляя его запись уведомления о событии из календаря
            <para>Если процесс является текущим, управление передается следующему по порядку процессу</para>
            </summary>
        </member>
        <member name="M:Simulation.ISchedulable.Reactivate">
            <summary>
            Перемещает запись уведомления об активации процесса, в том числе приостановленного, непосредственно после текущего.
            <para>Если процесс находится в активном состоянии (то есть, является текущим), ничего не делает</para>
            </summary>
        </member>
        <member name="M:Simulation.ISchedulable.ReactivateAfter(Simulation.ISchedulable)">
            <summary>
            Перемещает запись уведомления об активации процесса непосредственно после записи указанного процесса
            <para>Если процесс находится в пассивном состоянии, создает новую запись уведомления</para>
            <para>Если процесс является активным, он приостанавливается</para>
            <para>Если процесс-параметр находится в пассивном состоянии, порождается исключение</para>
            </summary>
            <param name="act">Процесс, перед которым следует активировать данный</param>
        </member>
        <member name="M:Simulation.ISchedulable.ReactivateBefore(Simulation.ISchedulable)">
            <summary>
            Перемещает запись уведомления об активации процесса непосредственно перед записью указанного процесса
            <para>Если процесс находится в пассивном состоянии, создает новую запись уведомления</para>
            <para>Если процесс является активным, он приостанавливается</para>
            <para>Если процесс-параметр находится в пассивном состоянии, порождается исключение</para>
            </summary>
            <param name="act">Процесс, перед которым следует активировать данный</param>
        </member>
        <member name="M:Simulation.ISchedulable.ReactivateAt(System.Double)">
            <summary>
            Перемещает запись уведомления об активации процесса на указанное время
            <para>Если процесс находится в пассивном состоянии, создает новую запись уведомления</para>
            <para>Если процесс является активным, он приостанавливается</para>
            </summary>
            <param name="t">Имитационное время активации процесса</param>
        </member>
        <member name="M:Simulation.ISchedulable.ReactivateDelay(System.Double)">
            <summary>
            Перемещает запись уведомления об активации процесса непосредственно перед записью указанного процесса
            <para>Если процесс находится в пассивном состоянии, создает новую запись уведомления</para>
            <para>Если процесс является активным, он приостанавливается</para>
            <para>Если процесс-параметр находится в пассивном состоянии, порождается исключение</para>
            </summary>
            <param name="dt">Процесс, перед которым следует активировать данный</param>
        </member>
        <member name="M:Simulation.ISchedulable.ReactivatePriorAt(System.Double)">
            <summary>
            Перемещает запись уведомления об активации процесса на указанное время с приоритетом.
            <para>Если процесс находится в пассивном состоянии, создает новую запись уведомления</para>
            <para>Если процесс является активным, он приостанавливается</para>
            </summary>
            <param name="t">Имитационное время активации процесса</param>
        </member>
        <member name="M:Simulation.ISchedulable.ReactivatePriorDelay(System.Double)">
            <summary>
            Перемещает запись уведомления об активации процесса с указанной задержкой времени относительно текущего процесса с приоритетом.
            <para>Если процесс находится в пассивном состоянии, создает новую запись уведомления</para>
            <para>Если процесс является активным, он приостанавливается</para>
            </summary>
            <param name="dt">Имитационное время активации процесса</param>
        </member>
        <member name="M:Simulation.ISchedulable.Wait(Simulation.List)">
            <summary>
            Постановка процесса в очередь и переаод его в режим ожидания
            </summary>
            <param name="l">Очередь ожидания</param>
        </member>
        <member name="P:Simulation.ISchedulable.Idle">
            <summary>
            Указывает, находится ли процесс в пассивном или завершенном состоянии
            </summary>
        </member>
        <member name="P:Simulation.ISchedulable.Event">
            <summary>
            Уведомление о событии, связанное с процессом
            </summary>
        </member>
        <member name="M:Simulation.Process.#ctor">
            <summary>
            Конструктор. Устанавливает ссылку на родительскую имитацию.
            </summary>
        </member>
        <member name="F:Simulation.Process.Parent">
            <summary>
            Процесс имитации, в рамках которой выполняется данный процесс
            </summary>
        </member>
        <member name="F:Simulation.Process.StartingTime">
            <summary>
            Имитационное время начала работы процесса
            </summary>
        </member>
        <member name="F:Simulation.Process.TimeLeft">
            <summary>
            Имитационное время, оставшееся до выполнения незавершенного действия.
            Используется, если текущее действие было перехвачено другим процессом.
            </summary>
        </member>
        <member name="M:Simulation.Process.Activate">
            <summary>
            Помещает запись уведомления об активации процесса непосредственно после текущего.
            <para>Если процесс находится в активном или приостановленном состоянии, ничего не делает</para>
            </summary>
        </member>
        <member name="M:Simulation.Process.ActivateAfter(Simulation.EventNotice)">
            <summary>
            Создает запись уведомления об активации процесса непосредственно после указанной записи
            </summary>
            <param name="en">Запись уведомления о событии, после которой следует поместить запись нового события</param>
        </member>
        <member name="M:Simulation.Process.ActivateAfter(Simulation.ISchedulable)">
            <summary>
            Создает запись уведомления об активации процесса непосредственно после записи указанного процесса
            <para>Если процесс находится в активном или приостановленном состоянии, ничего не делает</para>
            <para>Если процесс-параметр находится в пассивном или завершенном состоянии, порождается исключение</para>
            </summary>
            <param name="p">Процесс, после которого следует активировать данный</param>
        </member>
        <member name="M:Simulation.Process.ActivateAt(System.Double)">
            <summary>
            Создает запись уведомления об активации процесса в указанное время
            <para>Если процесс находится в активном или приостановленном состоянии, ничего не делает</para>
            </summary>
            <param name="t">Имитационное время активации процесса</param>
        </member>
        <member name="M:Simulation.Process.ActivateBefore(Simulation.EventNotice)">
            <summary>
            Создает запись уведомления об активации процесса непосредственно перед указанной записью
            <para>Если процесс находится в активном или приостановленном состоянии, ничего не делает</para>
            <para>Если процесс-параметр находится в пассивном или завершенном состоянии, порождается исключение</para>
            </summary>
            <param name="en">Запись уведомления о событии, перед которой следует поместить запись нового события</param>
        </member>
        <member name="M:Simulation.Process.ActivateBefore(Simulation.ISchedulable)">
            <summary>
            Создает запись уведомления об активации процесса непосредственно перед записью указанного процесса
            <para>Если процесс находится в активном или приостановленном состоянии, ничего не делает</para>
            <para>Если процесс-параметр находится в пассивном или завершенном состоянии, порождается исключение</para>
            </summary>
            <param name="p">Процесс, перед которым следует активировать данный</param>
        </member>
        <member name="M:Simulation.Process.ActivateDelay(System.Double)">
            <summary>
            Создает запись уведомления об активации процесса с указанной задержкой времени
            <para>Если процесс находится в активном или приостановленном состоянии, ничего не делает</para>
            </summary>
            <param name="dt">Задержка относительно текущего имитационного времени</param>
        </member>
        <member name="M:Simulation.Process.ActivatePriorAt(System.Double)">
            <summary>
            Создает запись уведомления об активации процесса в указанное время с приоритетом по отношению к процессам,
            запланированным ранее на то же время
            <para>Если процесс находится в активном или приостановленном состоянии, ничего не делает</para>
            </summary>
            <param name="t">Имитационное время активации процесса</param>
        </member>
        <member name="M:Simulation.Process.ActivatePriorDelay(System.Double)">
            <summary>
            Создает запись уведомления об активации процесса с указанной задержкой времени с приоритетом по отношению к процессам,
            запланированным ранее на то же время
            <para>Если процесс находится в активном или приостановленном состоянии, ничего не делает</para>
            </summary>
            <param name="dt">Задержка относительно текущего имитационного времени</param>
        </member>
        <member name="M:Simulation.Process.ClearFinished">
            <summary>
            Удаление завершенных процессов. 
            Используется для оптимизации количества потоков в программе
            </summary>
        </member>
        <member name="M:Simulation.Process.Execute">
            <summary>
            Основной алгоритм работы процесса. Должен быть переопределен в производном классе.
            В данном классе ничего не делает.
            </summary>
        </member>
        <member name="M:Simulation.Process.Finish">
            <summary>
            Завершение работы процесса. Удаляет уведомление о событии из календаря.
            В переопределенном методе производного класса ОБЯЗАТЕЛЬНО должен вызываться ПОСЛЕДНИМ.
            </summary>
        </member>
        <member name="M:Simulation.Process.GoFinished">
            <summary>
            Включение процесса в список завершенных для последующего автоматического удаления.
            <para>Любой процесс, не завершаемый явно извне методом Finish(), должен завершать свою работу посредством этого метода</para>
            </summary>
        </member>
        <member name="M:Simulation.Process.Hold">
            <summary>
            Обрабатывает все события, запланированные на текущее время, и возобновляет процесс
            <para>Эквивалентно вызову Hold(0)</para>
            </summary>
        </member>
        <member name="M:Simulation.Process.Hold(System.Double)">
            <summary>
            Приостанавливает процесс на заданный промежуток времени
            </summary>
            <param name="dt">Время приостановки процесса</param>
        </member>
        <member name="M:Simulation.Process.Init">
            <summary>
            Инициализация процесса
            <para>Может использоваться для создания внутренних объектов процесса, которые должны создаваться в контексте процесса</para>
            <para>В отличие от конструктора, исполняется в контексте потока данного процесса</para>
            </summary>
        </member>
        <member name="M:Simulation.Process.Passivate">
            <summary>
            Переводит процесс в пассивное состояние, удаляя его запись уведомления о событии из календаря
            <para>Если процесс является текущим, управление передается следующему по порядку процессу</para>
            </summary>
        </member>
        <member name="M:Simulation.Process.Reactivate">
            <summary>
            Перемещает запись уведомления об активации процесса, в том числе приостановленного, непосредственно после текущего.
            <para>Если процесс находится в активном состоянии (то есть, является текущим), ничего не делает</para>
            </summary>
        </member>
        <member name="M:Simulation.Process.ReactivateAfter(Simulation.EventNotice)">
            <summary>
            Перемещает запись уведомления об активации процесса непосредственно после указанной записи
            <para>Если процесс находится в пассивном состоянии, создает новую запись уведомления</para>
            <para>Если процесс является активным, он приостанавливается</para>
            <para>Если процесс-параметр находится в пассивном состоянии, порождается исключение</para>
            </summary>
            <param name="en">Запись, после которой следует активировать текущую</param>
        </member>
        <member name="M:Simulation.Process.ReactivateAfter(Simulation.ISchedulable)">
            <summary>
            Перемещает запись уведомления об активации процесса непосредственно после записи указанного процесса
            <para>Если процесс находится в пассивном состоянии, создает новую запись уведомления</para>
            <para>Если процесс является активным, он приостанавливается</para>
            <para>Если процесс-параметр находится в пассивном состоянии, порождается исключение</para>
            </summary>
            <param name="p">Процесс, перед которым следует активировать данный</param>
        </member>
        <member name="M:Simulation.Process.ReactivateAt(System.Double)">
            <summary>
            Перемещает запись уведомления об активации процесса на указанное время
            <para>Если процесс находится в пассивном состоянии, создает новую запись уведомления</para>
            <para>Если процесс является активным, он приостанавливается</para>
            </summary>
            <param name="t">Имитационное время активации процесса</param>
        </member>
        <member name="M:Simulation.Process.ReactivateBefore(Simulation.EventNotice)">
            <summary>
            Перемещает запись уведомления об активации процесса непосредственно перед указанной записью
            <para>Если процесс находится в пассивном состоянии, создает новую запись уведомления</para>
            <para>Если процесс является активным, он приостанавливается</para>
            <para>Если процесс-параметр находится в пассивном состоянии, порождается исключение</para>
            </summary>
            <param name="en">Запись, перед которой следует активировать текущую</param>
        </member>
        <member name="M:Simulation.Process.ReactivateBefore(Simulation.ISchedulable)">
            <summary>
            Перемещает запись уведомления об активации процесса непосредственно перед записью указанного процесса
            <para>Если процесс находится в пассивном состоянии, создает новую запись уведомления</para>
            <para>Если процесс является активным, он приостанавливается</para>
            <para>Если процесс-параметр находится в пассивном состоянии, порождается исключение</para>
            </summary>
            <param name="p">Процесс, перед которым следует активировать данный</param>
        </member>
        <member name="M:Simulation.Process.ReactivateDelay(System.Double)">
            <summary>
            Перемещает запись уведомления об активации процесса с указанной задержкой времени относительно текущего процесса.
            <para>Если процесс находится в пассивном состоянии, создает новую запись уведомления</para>
            <para>Если процесс является активным, он приостанавливается</para>
            </summary>
            <param name="dt">Имитационное время активации процесса</param>
        </member>
        <member name="M:Simulation.Process.ReactivatePriorAt(System.Double)">
            <summary>
            Перемещает запись уведомления об активации процесса на указанное время с приоритетом.
            <para>Если процесс находится в пассивном состоянии, создает новую запись уведомления</para>
            <para>Если процесс является активным, он приостанавливается</para>
            </summary>
            <param name="t">Имитационное время активации процесса</param>
        </member>
        <member name="M:Simulation.Process.ReactivatePriorDelay(System.Double)">
            <summary>
            Перемещает запись уведомления об активации процесса с указанной задержкой времени относительно текущего процесса с приоритетом.
            <para>Если процесс находится в пассивном состоянии, создает новую запись уведомления</para>
            <para>Если процесс является активным, он приостанавливается</para>
            </summary>
            <param name="dt">Имитационное время активации процесса</param>
        </member>
        <member name="M:Simulation.Process.Run">
            <summary>
            Организует исполнение метода Execute() в контексте процесса
            </summary>
        </member>
        <member name="M:Simulation.Process.RunNextProc">
            <summary>
            Переход к следующему событию в календаре
            </summary>
        </member>
        <member name="M:Simulation.Process.SimTime">
            <summary>
            Возвращает текущее имитационное время. 
            Обращается к родительскому процесу имитации.
            </summary>
            <returns>Текущее имитационное время</returns>
        </member>
        <member name="M:Simulation.Process.StartRunning">
            <summary>
            Включение процесса в список свободных. Используется также 
            для извлечения процесса из очереди ожидания 
            (при этом он все равно попадает в список свободных процессов)
            </summary>
        </member>
        <member name="M:Simulation.Process.Wait(Simulation.List)">
            <summary>
            Постановка процесса в очередь и перевод его в режим ожидания
            </summary>
            <param name="q">Очередь ожидания</param>
        </member>
        <member name="P:Simulation.Process.Event">
            <summary>
            Уведомление о событии, связанное с процессом
            </summary>
        </member>
        <member name="P:Simulation.Process.EventTime">
            <summary>
            Время наступления события данного процесса. 
            Если события нет, большая отрицательная величина (-1e300).
            </summary>
        </member>
        <member name="P:Simulation.Process.Idle">
            <summary>
            Указывает, находится ли процесс в пассивном или завершенном состоянии
            </summary>
        </member>
        <member name="T:Simulation.StopSim">
            <summary>
            Фиктивный класс, предназначенный для передачи от обработчика события информации
            о том, что имитация должна быть приостановлена
            </summary>
        </member>
        <member name="T:Simulation.ContinueSim">
            <summary>
            Фиктивный класс, предназначенный для передачи от обработчика события информации
            о том, что имитация должна продолжаться
            </summary>
        </member>
        <member name="T:Simulation.SimProc">
            <summary>
            Класс SimProc - главный процесс имитации
            </summary>
        </member>
        <member name="M:Simulation.SimProc.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="F:Simulation.SimProc.Calendar">
            <summary>
            Календарь событий
            </summary>
        </member>
        <member name="F:Simulation.SimProc.Collect">
            <summary>
            Сборщик завершенных процессов
            </summary>
        </member>
        <member name="F:Simulation.SimProc.CurrentSimTime">
            <summary>
            Текущее имитационное время
            </summary>
        </member>
        <member name="F:Simulation.SimProc.Dispatcher">
            <summary>
            Диспетчер, управляющий работой данной имитации
            </summary>
        </member>
        <member name="F:Simulation.SimProc.Finished">
            <summary>
            Список завершенных процессов для периодического удаления
            </summary>
        </member>
        <member name="F:Simulation.SimProc.Running">
            <summary>
            Список свободных процессов
            </summary>
        </member>
        <member name="F:Simulation.SimProc.VisProc">
            <summary>
            Процесс-визуализатор
            </summary>
        </member>
        <member name="M:Simulation.SimProc.CalendarOrder(Simulation.ILink,Simulation.ILink)">
            <summary>
            Стандартная функция сравнения для календаря событий. 
            Используется при вставке уведомлений о событиях в календарь без приоритета
            </summary>
            <param name="a">Ссылка на вставляемое уведомление</param>
            <param name="b">Ссылка на очередное уведомление списка</param>
            <returns>Результат сравнения</returns>
        </member>
        <member name="M:Simulation.SimProc.ClearStat">
            <summary>
            Очистка статистики
            </summary>
        </member>
        <member name="M:Simulation.SimProc.DumpEventQueue">
            <summary>
            Вывод на консоль календаря событий. Используется с целью диагностики при отладке программ
            </summary>
        </member>
        <member name="M:Simulation.SimProc.Finish">
            <summary>
            Завершение имитации
            </summary>
        </member>
        <member name="M:Simulation.SimProc.Run">
            <summary>
            Исполняемый метод процесса имитации. Никогда не должен вызываться прямо или переопределяться
            </summary>
        </member>
        <member name="M:Simulation.SimProc.SimTime">
            <summary>
            Возвращает текущее имитационное время данной имитации
            </summary>
            <returns>Имитационное время</returns>
        </member>
        <member name="M:Simulation.SimProc.Start">
            <summary>
            Запуск процесса имитации. Фактически, запускается диспетчер, управляющий имитацией
            </summary>
        </member>
        <member name="M:Simulation.SimProc.StopStat">
            <summary>
            Коррекция статистики к текущему моменту
            </summary>
        </member>
        <member name="P:Simulation.SimProc.VisualInterval">
            <summary>
            Шаг визуализации
            </summary>
        </member>
        <member name="T:Simulation.CompareFunction">
            <summary>
            Делегат для определения функции сравнения, определяющей место вставки узла в список.
            Вставляемый узел помещается в список перед первым узлом, для которого функция дает результат true.
            </summary>
            <param name="a">Ссылка на вставляемый узел</param>
            <param name="b">Ссылка на сравниваемый узел списка</param>
            <returns>Результат сравнения</returns>
        </member>
        <member name="T:Simulation.List">
            <summary>
            Класс List - список узлов. Непосредственно сам объект является заголовочной ячейкой списка.
            </summary>
        </member>
        <member name="M:Simulation.List.#ctor">
            <summary>
            Конструктор по умолчанию. 
            Список создается с привязкой к моменту имитационного времени, 
            соответствующему текущему процессу имитации.
            Функция сравнения не задается.
            Максимальная длина не установлена.
            </summary>
        </member>
        <member name="M:Simulation.List.#ctor(Simulation.CompareFunction)">
            <summary>
            Конструктор. 
            Список создается с привязкой к моменту имитационного времени, 
            соответствующему текущему процессу имитации.
            Функция сравнения задается параметром.
            Максимальная длина не установлена.
            </summary>
            <param name="order">Делегат функции сравнения</param>
        </member>
        <member name="M:Simulation.List.#ctor(Simulation.CompareFunction,System.Int32)">
            <summary>
            Конструктор. 
            Список создается с привязкой к моменту имитационного времени, 
            соответствующему текущему процессу имитации, и заданной максимальной длиной.
            Функция сравнения задается параметром.
            </summary>
            <param name="order">Делегат функции сравнения</param>
            <param name="max">Максимальный размер очереди</param>
        </member>
        <member name="M:Simulation.List.#ctor(Simulation.CompareFunction,System.Int32,System.Double)">
            <summary>
            Конструктор. 
            Список создается с привязкой к заданному моменту 
            имитационного времени и заданной максимальной длиной.
            Функция сравнения задается параметром.
            </summary>
            <param name="order">Делегат функции сравнения</param>
            <param name="max">Максимальный размер очереди</param>
            <param name="simTime">Имитационное время, соответствующее созданию списка</param>
        </member>
        <member name="M:Simulation.List.#ctor(Simulation.CompareFunction,System.Int32,System.Double,System.String)">
            <summary>
            Конструктор. 
            Список создается с привязкой к заданному моменту имитационного времени 
            и заданной максимальной длиной.
            Функция сравнения задается параметром.
            </summary>
            <param name="order">Делегат функции сравнения</param>
            <param name="max">Максимальный размер очереди</param>
            <param name="simTime">Имитационное время, соответствующее созданию списка</param>
            <param name="aHeader">Заголовок списка при выводе статистики</param>
        </member>
        <member name="M:Simulation.List.#ctor(Simulation.CompareFunction,System.Int32,System.String)">
            <summary>
            Конструктор. 
            Список создается с привязкой к моменту имитационного времени, 
            соответствующему текущему процессу имитации, и заданной максимальной длиной.
            Функция сравнения задается параметром.
            </summary>
            <param name="order">Делегат функции сравнения</param>
            <param name="max">Максимальный размер очереди</param>
            <param name="aHeader">Заголовок списка при выводе статистики</param>
        </member>
        <member name="M:Simulation.List.#ctor(Simulation.CompareFunction,System.String)">
            <summary>
            Конструктор. 
            Список создается с привязкой к моменту имитационного времени, 
            соответствующему текущему процессу имитации.
            Функция сравнения задается параметром.
            Максимальная длина не установлена.
            </summary>
            <param name="order">Делегат функции сравнения</param>
            <param name="aHeader">Заголовок списка при выводе статистики</param>
        </member>
        <member name="M:Simulation.List.#ctor(System.Int32,System.Double,System.String)">
            <summary>
            Конструктор. 
            Список создается с привязкой к заданному моменту имитационного времени 
            и заданной максимальной длиной.
            Функция сравнения не задается.
            </summary>
            <param name="max">Максимальный размер очереди</param>
            <param name="simTime">Имитационное время, соответствующее созданию списка</param>
            <param name="aHeader">Заголовок списка при выводе статистики</param>
        </member>
        <member name="M:Simulation.List.#ctor(System.Int32)">
            <summary>
            Конструктор по умолчанию. 
            Список создается с привязкой к моменту имитационного времени, 
            соответствующему текущему процессу имитации, и заданной максимальной длиной.
            Функция сравнения не задается.
            </summary>
            <param name="max">Максимальный размер очереди</param>
        </member>
        <member name="M:Simulation.List.#ctor(System.Int32,System.String)">
            <summary>
            Конструктор с указанием заголовка. 
            Список создается с привязкой к моменту имитационного времени, 
            соответствующему текущему процессу имитации, и заданной максимальной длиной.
            Функция сравнения не задается.
            </summary>
            <param name="max">Максимальный размер очереди</param>
            <param name="aHeader">Заголовок списка при выводе статистики</param>
        </member>
        <member name="M:Simulation.List.#ctor(System.String)">
            <summary>
            Конструктор с указанием заголовка. 
            Список создается с привязкой к моменту имитационного времени, 
            соответствующему текущему процессу имитации.
            Функция сравнения не задается.
            Максимальная длина не установлена.
            </summary>
            <param name="aHeader">Заголовок списка при выводе статистики</param>
        </member>
        <member name="F:Simulation.List.CompFunc">
            <summary>
            Делегат функции сравнения, определяющий упорядоченность списка
            </summary>
        </member>
        <member name="F:Simulation.List.FPrev">
            <summary>
            Поле связи. Ссылка на предыдущий узел списка
            </summary>
        </member>
        <member name="F:Simulation.List.FNext">
            <summary>
            Поле связи. Ссылка на следующий узел списка
            </summary>
        </member>
        <member name="F:Simulation.List.LengthStat">
            <summary>
            Статистика по длине списка
            </summary>
        </member>
        <member name="F:Simulation.List.MaxSize">
            <summary>
            Максимально возможный размер очереди. Методы классов List и Link 
            не учитывают его, однако это значение может учитываться методами классов
            и компонентов при работе с очередями. 
            Значение, равное 0, означает отсутствие ограничения на длину.
            </summary>
        </member>
        <member name="F:Simulation.List.StatHeader">
            <summary>
            Заголовок при выводе статистики списка
            </summary>
        </member>
        <member name="F:Simulation.List.TimeStat">
            <summary>
            Статистика по времени нахождения узлов в очереди
            </summary>
        </member>
        <member name="M:Simulation.List.Clear">
            <summary>
            Очистка списка с завершением всех входящих в него узлов
            </summary>
        </member>
        <member name="M:Simulation.List.ClearStat">
            <summary>
            Очистка статистик списка с привязкой к текущему имитационному времени
            </summary>
        </member>
        <member name="M:Simulation.List.ClearStat(System.Double)">
            <summary>
            Очистка статистик списка с привязкой к заданному имитационному времени
            </summary>
            <param name="simTime">Имитационное время, когда выполняется очистка статистик</param>
        </member>
        <member name="M:Simulation.List.Empty">
            <summary>
            Проверка списка на пустоту
            </summary>
            <returns>true, если список пуст. false, если в нем есть хотя бы один узел.</returns>
        </member>
        <member name="M:Simulation.List.Finish">
            <summary>
            Удаление списка
            </summary>
        </member>
        <member name="M:Simulation.List.GetNext">
            <summary>
            Получение ссылки на следующий узел списка независимо от того, является он внутренней или заголовочной ячейкой
            </summary>
            <returns>Ссылка на следующий узел</returns>
        </member>
        <member name="M:Simulation.List.GetPrev">
            <summary>
            Получение ссылки на предыдущий узел списка независимо от того, является он внутренней или заголовочной ячейкой
            </summary>
            <returns>Ссылка на предыдущий узел</returns>
        </member>
        <member name="M:Simulation.List.SetNext(Simulation.ILinkage)">
            <summary>
            Установка ссылки на следующий узел списка
            </summary>
            <param name="newNext">Новая ссылка на следующий узел</param>
        </member>
        <member name="M:Simulation.List.SetPrev(Simulation.ILinkage)">
            <summary>
            Установка ссылки на предыдущий узел списка
            </summary>
            <param name="newPrev">Новая ссылка на предыдущий узел</param>
        </member>
        <member name="M:Simulation.List.Statistics">
            <summary>
            Отображение статистики по использованию списка
            </summary>
            <returns>Статистика в виде текста</returns>
        </member>
        <member name="M:Simulation.List.StopStat">
            <summary>
            Коррекция статистик списка к текущему имитационному времени
            </summary>
        </member>
        <member name="M:Simulation.List.StopStat(System.Double)">
            <summary>
            Коррекция статистик списка к заданному имитационному времени
            </summary>
            <param name="simTime">Имитационное время, к которому корректируется статистика</param>
        </member>
        <member name="P:Simulation.List.First">
            <summary>
            Ссылка на первый узел списка.
            </summary>
        </member>
        <member name="P:Simulation.List.Header">
            <summary>
            Ссылка на заголовочную ячейку списка
            </summary>
        </member>
        <member name="P:Simulation.List.Last">
            <summary>
            Ссылка на последний узел списка.
            </summary>
        </member>
        <member name="P:Simulation.List.Next">
            <summary>
            Только для чтения. Ссылка на следующий узел, 
            если он является внутренней ячейкой списка.
            В пртивном случае - null.
            </summary>
        </member>
        <member name="P:Simulation.List.OrderFunc">
            <summary>
            Установка делегата функции сравнения. 
            Возможна только для пустого списка, для которого эта функция еще не была задана.
            Если любое из этих условий нарушается, не выполняется никаких действий.
            </summary>
        </member>
        <member name="P:Simulation.List.Prev">
            <summary>
            Только для чтения. Ссылка на предыдущий узел, 
            если он является внутренней ячейкой списка.
            В противном случае - null.
            </summary>
        </member>
        <member name="P:Simulation.List.Size">
            <summary>
            Количество узлов списка
            </summary>
        </member>
        <member name="T:Simulation.Dispatcher">
            <summary>
            Класс Dispatcher - диспетчер для управления исполнением сопрограмм
            <para>Сопрограммы, работающие под управлением диспетчесра, должны передавать управление
            друг другу посредством метода SwitchTo()</para>
            <para>Вызов SwitchTo(null) приостанавливает или завершает работу диспетчера и всех сопрограмм, которыми он управляет</para>
            </summary>
        </member>
        <member name="M:Simulation.Dispatcher.#ctor(Simulation.Coroutine)">
            <summary>
            Конструктор
            </summary>
            <param name="first">Указывает, с какой сопрограммы должно начаться исполнение</param>
        </member>
        <member name="F:Simulation.Dispatcher.NextProc">
            <summary>
            Очередная сопрограма для исполнения
            </summary>
        </member>
        <member name="F:Simulation.Dispatcher.PrevProc">
            <summary>
            Указатель на сопрограмму, которая вызвала диспетчера (null, если был вызов из главного потока программы)
            </summary>
        </member>
        <member name="M:Simulation.Dispatcher.Run">
            <summary>
            Основной цикл работы диспетчера сопрограмм
            </summary>
        </member>
        <member name="T:Simulation.SimulationDispatcher">
            <summary>
            Класс SimulationDispatcher - диспетчер, управляющий процессом имитации
            <para>Процессы, участвующие в имитации, в качестве результата передают ссылку на себя</para>
            <para>Если результатом является ссылка на диспетчера, исполнение имитации приостанавливает,
            и возобновляется работа основного потока программы</para>
            </summary>
        </member>
        <member name="M:Simulation.SimulationDispatcher.#ctor(Simulation.SimProc)">
            <summary>
            Конструктор
            </summary>
            <param name="simProcess">Процесс имитации, в рамках которого происходит работа</param>
        </member>
        <member name="F:Simulation.SimulationDispatcher.Owner">
            <summary>
            Ссылка на процесс, управляющий имитацией
            </summary>
        </member>
        <member name="M:Simulation.SimulationDispatcher.Run">
            <summary>
            Цикл работы диспетчера
            </summary>
        </member>
        <member name="T:Simulation.EventProc">
            <summary>
            Делегат, описывающий событийные методы компонентов
            </summary>
        </member>
        <member name="T:Simulation.ComponentEventNotice">
            <summary>
            Уведомление о событии, связанное с объектом-компонентом
            </summary>
        </member>
        <member name="M:Simulation.ComponentEventNotice.#ctor(System.Double,Simulation.Component)">
            <summary>
            Конструктор
            </summary>
            <param name="time">Время события</param>
            <param name="comp">Компонент, обрабатывающий событие</param>
        </member>
        <member name="F:Simulation.ComponentEventNotice.Comp">
            <summary>
            Компонент, обрабатывающий событие
            </summary>
        </member>
        <member name="M:Simulation.ComponentEventNotice.RunEvent">
            <summary>
            Обработка события
            </summary>
            <returns></returns>
        </member>
        <member name="T:Simulation.Component">
            <summary>
            Класс Component является основой для создания компонентов - 
            объектов имитации, способных обрабатывать события
            </summary>
        </member>
        <member name="M:Simulation.Component.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="F:Simulation.Component.FirstEvent">
            <summary>
            Признак того, является ли следующее событие первым в жизненном цикле компонента.
            Непосредственно перед обработкой первого события устанавливается имитационное время 
            начала работы компонента.
            </summary>
        </member>
        <member name="F:Simulation.Component.OnNextEvent">
            <summary>
            Ссылка на событийную процедуру для следующего события
            </summary>
        </member>
        <member name="F:Simulation.Component.OnStartEvent">
            <summary>
            Ссылка на событийную процедуру для события начала работы компонента
            </summary>
        </member>
        <member name="F:Simulation.Component.OnServiceFinishedEvent">
            <summary>
            Ссылка на событийную процедуру для события окончания обслуживания
            </summary>
        </member>
        <member name="F:Simulation.Component.Parent">
            <summary>
            Ссылка на родительскую имитацию
            </summary>
        </member>
        <member name="F:Simulation.Component.StartingTime">
            <summary>
            Время создания объекта. Устанавливается автоматически в конструкторе. 
            При необходимости впоследствии может быть изменено.
            </summary>
        </member>
        <member name="M:Simulation.Component.Activate">
            <summary>
            Помещает запись уведомления об активации компонента непосредственно после текущего.
            <para>Если компонент находится в активном состоянии, создается новая запись уведомления</para>
            <para>Если компонент находится в приостановленном состоянии, ничего не делает</para>
            </summary>
        </member>
        <member name="M:Simulation.Component.Activate(Simulation.EventProc)">
            <summary>
            Помещает запись уведомления об активации компонента непосредственно после текущего с указанием событийного метода.
            <para>Если компонент находится в активном состоянии, создается новая запись уведомления</para>
            <para>Если компонент находится в приостановленном состоянии, ничего не делает</para>
            </summary>
            <param name="nextProc">Метод обработки планируемого события</param>
        </member>
        <member name="M:Simulation.Component.ActivateAfter(Simulation.EventNotice)">
            <summary>
            Создает запись уведомления об активации компонента непосредственно после указанной записи
            </summary>
            <param name="en">Запись уведомления о событии, после которой следует поместить запись нового события</param>
        </member>
        <member name="M:Simulation.Component.ActivateAfter(Simulation.ISchedulable)">
            <summary>
            Создает запись уведомления об активации компонента непосредственно после записи указанного процесса
            <para>Если компонент находится в активном состоянии, создается новая запись уведомления</para>
            <para>Если компонент находится в приостановленном состоянии, ничего не делает</para>
            <para>Если процесс-параметр находится в пассивном или завершенном состоянии, порождается исключение</para>
            </summary>
            <param name="sch">Процесс, после которого следует активировать компонент</param>
        </member>
        <member name="M:Simulation.Component.ActivateAfter(Simulation.ISchedulable,Simulation.EventProc)">
            <summary>
            Создает запись уведомления об активации компонента непосредственно после указанной записи с указанием событийного метода
            <para>Если компонент находится в активном состоянии, создается новая запись уведомления</para>
            <para>Если компонент находится в приостановленном состоянии, ничего не делает</para>
            <para>Если процесс-параметр находится в пассивном или завершенном состоянии, порождается исключение</para>
            </summary>
            <param name="sch">Процесс, после которого следует активировать компонент</param>
            <param name="nextProc">Метод обработки планируемого события</param>
        </member>
        <member name="M:Simulation.Component.ActivateAt(System.Double)">
            <summary>
            Создает запись уведомления об активации компонента в указанное время
            <para>Если компонент находится в активном состоянии, создается новая запись уведомления</para>
            <para>Если компонент находится в приостановленном состоянии, ничего не делает</para>
            </summary>
            <param name="t">Имитационное время активации компонента</param>
        </member>
        <member name="M:Simulation.Component.ActivateAt(System.Double,Simulation.EventProc)">
            <summary>
            Создает запись уведомления об активации компонента в указанное время с указанием событийного метода
            <para>Если компонент находится в активном состоянии, создается новая запись уведомления</para>
            <para>Если компонент находится в приостановленном состоянии, ничего не делает</para>
            </summary>
            <param name="t">Имитационное время активации компонента</param>
            <param name="nextProc">Метод обработки планируемого события</param>
        </member>
        <member name="M:Simulation.Component.ActivateBefore(Simulation.EventNotice)">
            <summary>
            Создает запись уведомления об активации компонента непосредственно перед указанной записью
            </summary>
            <param name="en">Запись уведомления о событии, перед которой следует поместить запись нового события</param>
        </member>
        <member name="M:Simulation.Component.ActivateBefore(Simulation.ISchedulable)">
            <summary>
            Создает запись уведомления об активации компонента непосредственно перед записью указанного процесса
            <para>Если компонент находится в активном состоянии, создается новая запись уведомления</para>
            <para>Если компонент находится в приостановленном состоянии, ничего не делает</para>
            <para>Если процесс-параметр находится в пассивном или завершенном состоянии, порождается исключение</para>
            </summary>
            <param name="sch">Процесс, перед которым следует активировать компонент</param>
        </member>
        <member name="M:Simulation.Component.ActivateBefore(Simulation.ISchedulable,Simulation.EventProc)">
            <summary>
            Создает запись уведомления об активации компонента непосредственно 
            перед записью указанного процесса с указанием событийного метода
            <para>Если компонент находится в активном состоянии, создается новая запись уведомления</para>
            <para>Если компонент находится в приостановленном состоянии, ничего не делает</para>
            <para>Если процесс-параметр находится в пассивном или завершенном состоянии, порождается исключение</para>
            </summary>
            <param name="sch">Процесс, перед которым следует активировать компонент</param>
            <param name="nextProc">Метод обработки планируемого события</param>
        </member>
        <member name="M:Simulation.Component.ActivateDelay(System.Double)">
            <summary>
            Создает запись уведомления об активации компонента с указанной задержкой времени
            <para>Если компонент находится в активном состоянии, создается новая запись уведомления</para>
            <para>Если компонент находится в приостановленном состоянии, ничего не делает</para>
            </summary>
            <param name="dt">Задержка относительно текущего имитационного времени</param>
        </member>
        <member name="M:Simulation.Component.ActivateDelay(System.Double,Simulation.EventProc)">
            <summary>
            Создает запись уведомления об активации компонента с указанной задержкой времени с указанием событийного метода
            <para>Если компонент находится в активном состоянии, создается новая запись уведомления</para>
            <para>Если компонент находится в приостановленном состоянии, ничего не делает</para>
            </summary>
            <param name="dt">Задержка относительно текущего имитационного времени</param>
            <param name="nextProc">Метод обработки планируемого события</param>
        </member>
        <member name="M:Simulation.Component.ActivatePriorAt(System.Double)">
            <summary>
            Создает запись уведомления об активации компонента в указанное время с приоритетом
            <para>Если компонент находится в активном состоянии, создается новая запись уведомления</para>
            <para>Если компонент находится в приостановленном состоянии, ничего не делает</para>
            </summary>
            <param name="t">Имитационное время активации компонента</param>
        </member>
        <member name="M:Simulation.Component.ActivatePriorAt(System.Double,Simulation.EventProc)">
            <summary>
            Создает запись уведомления об активации компонента в указанное время 
            с указанием событийного метода с приоритетом
            <para>Если компонент находится в активном состоянии, создается новая запись уведомления</para>
            <para>Если компонент находится в приостановленном состоянии, ничего не делает</para>
            </summary>
            <param name="t">Имитационное время активации компонента</param>
            <param name="nextProc">Метод обработки планируемого события</param>
        </member>
        <member name="M:Simulation.Component.ActivatePriorDelay(System.Double)">
            <summary>
            Создает запись уведомления об активации компонента 
            с указанной задержкой времени с приоритетом
            <para>Если компонент находится в активном состоянии, создается новая запись уведомления</para>
            <para>Если компонент находится в приостановленном состоянии, ничего не делает</para>
            </summary>
            <param name="dt">Задержка относительно текущего имитационного времени</param>
        </member>
        <member name="M:Simulation.Component.ActivatePriorDelay(System.Double,Simulation.EventProc)">
            <summary>
            Создает запись уведомления об активации компонента 
            с указанной задержкой времени с указанием событийного метода с приоритетом
            <para>Если компонент находится в активном состоянии, создается новая запись уведомления</para>
            <para>Если компонент находится в приостановленном состоянии, ничего не делает</para>
            </summary>
            <param name="dt">Задержка относительно текущего имитационного времени</param>
            <param name="nextProc">Метод обработки планируемого события</param>
        </member>
        <member name="M:Simulation.Component.ClearFinished">
            <summary>
            Удаление завершенных процессов. Используется для оптимизации количества потоков в программе
            <para>Если в программе не используются процессы, а есть только компоненты, 
            этот метод, а также GoFinished() и StartRunning(), не нужны</para>
            </summary>
        </member>
        <member name="M:Simulation.Component.GoFinished">
            <summary>
            Включение компонента в список завершенных для последующего автоматического удаления.
            <para>Представлен для совместимости с классом Process 
            с целью более простого перехода от процессов к компонентам. 
            Реально в этом методе нет необходимости, посткольку в .NET 
            неиспользуемые объекты удаляются автоматически при сборке мусора</para>
            <para>Если в программе не используются процессы, а есть только компоненты, 
            этот метод, а также ClearFinished() и StartRunning(), не нужны</para>
            </summary>
        </member>
        <member name="M:Simulation.Component.ServiceFinishedEvent">
            <summary>
            Событийный метод окончания обслуживания. 
            <para>При планировании обслуживающего действия ссылка на этот метод 
            помечается как очередной, если не указан иной метод.</para>
            <para>Если в жизненном цикле компонента имеется только одно 
            обслуживающее действие, следует переопределить только этот метод.</para>
            <para>Если алгоритм работы компонента подразумевает несколько 
            обслуживающих действий, для окончания каждого из них должен быть 
            предусмотрен метод с аналогичной сигнатурой</para>
            </summary>
        </member>
        <member name="M:Simulation.Component.StartEvent">
            <summary>
            Событийный метод начала работы процесса. 
            <para>При создании компонента ссылка на этот метод помечается как очередной.</para>
            <para>Если компонент обрабатывает единственное событие, другие событийные методы не нужны</para>
            <para>Если алгоритм работы компонента предусматривает несколько событий,
            данный метод будет соответствовать первому событию. Для обработки других событий 
            в классе компонента необходимо предусмотреть соответствующие методы
            с аналогичной сигнатурой</para>
            </summary>
        </member>
        <member name="M:Simulation.Component.Passivate">
            <summary>
            Исключает уведомление о событии для компонента из календаря
            </summary>
        </member>
        <member name="M:Simulation.Component.Reactivate">
            <summary>
            Перемещает запись уведомления об активации компонента, 
            в том числе приостановленного, непосредственно после текущего.
            <para>Если компонент находится в активном состоянии 
            (то есть, является текущим), создается новая запись уведомления</para>
            </summary>
        </member>
        <member name="M:Simulation.Component.Reactivate(Simulation.EventProc)">
            <summary>
            Перемещает запись уведомления об активации компонента, 
            в том числе приостановленного, непосредственно после текущего 
            с указанием событийного метода.
            <para>Если компонент находится в активном состоянии 
            (то есть, является текущим), создается новая запись уведомления</para>
            </summary>
            <param name="nextProc">Событийный метод обработки планируемого события</param>
        </member>
        <member name="M:Simulation.Component.ReactivateAfter(Simulation.ISchedulable)">
            <summary>
            Перемещает запись уведомления об активации компонента 
            непосредственно после записи указанного процесса
            <para>Если компонент находится в активном или пассивном состоянии, 
            создает новую запись уведомления</para>
            <para>Если процесс-параметр находится в пассивном состоянии, 
            порождается исключение</para>
            </summary>
            <param name="sch">Процесс, после записи которого следует активировать компонент</param>
        </member>
        <member name="M:Simulation.Component.ReactivateAfter(Simulation.ISchedulable,Simulation.EventProc)">
            <summary>
            Перемещает запись уведомления об активации компонента 
            непосредственно после записи указанного процесса
            с указанием событийного метода.
            <para>Если компонент находится в активном или пассивном состоянии, 
            создает новую запись уведомления</para>
            <para>Если процесс-параметр находится в пассивном состоянии, 
            порождается исключение</para>
            </summary>
            <param name="sch">Процесс, после записи которого следует активировать компонент</param>
            <param name="nextProc">Событийный метод обработки планируемого события</param>
        </member>
        <member name="M:Simulation.Component.ReactivateAfter(Simulation.EventNotice)">
            <summary>
            Перемещает запись уведомления об активации компонента 
            непосредственно после указанной записи
            <para>Если компонент находится в активном или пассивном состоянии, 
            создает новую запись уведомления</para>
            <para>Если процесс-параметр находится в пассивном состоянии, 
            порождается исключение</para>
            </summary>
            <param name="en">Запись, после которой следует активировать текущую</param>
        </member>
        <member name="M:Simulation.Component.ReactivateAt(System.Double)">
            <summary>
            Перемещает запись уведомления об активации компонента на указанное время
            <para>Если компонент находится в активном или пассивном состоянии, 
            создает новую запись уведомления</para>
            </summary>
            <param name="t">Имитационное время активации процесса</param>
        </member>
        <member name="M:Simulation.Component.ReactivateAt(System.Double,Simulation.EventProc)">
            <summary>
            Перемещает запись уведомления об активации компонента на указанное время
            с указанием событийного метода.
            <para>Если компонент находится в активном или пассивном состоянии, 
            создает новую запись уведомления</para>
            </summary>
            <param name="t">Имитационное время активации процесса</param>
            <param name="nextProc">Событийный метод обработки планируемого события</param>
        </member>
        <member name="M:Simulation.Component.ReactivateBefore(Simulation.EventNotice)">
            <summary>
            Перемещает запись уведомления об активации компонента 
            непосредственно перед записью указанного процесса
            <para>Если компонент находится в активном или пассивном состоянии, 
            создает новую запись уведомления</para>
            <para>Если процесс-параметр находится в пассивном состоянии, 
            порождается исключение</para>
            </summary>
            <param name="en">Процесс, перед записью которого следует активировать компонент</param>
        </member>
        <member name="M:Simulation.Component.ReactivateBefore(Simulation.ISchedulable)">
            <summary>
            Перемещает запись уведомления об активации компонента 
            непосредственно перед записью указанного процесса
            <para>Если компонент находится в активном или пассивном состоянии, 
            создает новую запись уведомления</para>
            <para>Если процесс-параметр находится в пассивном состоянии, 
            порождается исключение</para>
            </summary>
            <param name="sch">Процесс, перед записью которого следует активировать компонент</param>
        </member>
        <member name="M:Simulation.Component.ReactivateBefore(Simulation.ISchedulable,Simulation.EventProc)">
            <summary>
            Перемещает запись уведомления об активации компонента 
            непосредственно перед записью указанного процесса
            с указанием событийного метода.
            <para>Если компонент находится в активном или пассивном состоянии, 
            создает новую запись уведомления</para>
            <para>Если процесс-параметр находится в пассивном состоянии, 
            порождается исключение</para>
            </summary>
            <param name="sch">Процесс, перед записью которого следует активировать компонент</param>
            <param name="nextProc">Событийный метод обработки планируемого события</param>
        </member>
        <member name="M:Simulation.Component.ReactivateDelay(System.Double)">
            <summary>
            Перемещает запись уведомления об активации компонента 
            с указанной задержкой времени относительно текущего процесса.
            <para>Если компонент находится в активном или пассивном состоянии, 
            создает новую запись уведомления</para>
            </summary>
            <param name="dt">Имитационное время активации компонента</param>
        </member>
        <member name="M:Simulation.Component.ReactivateDelay(System.Double,Simulation.EventProc)">
            <summary>
            Перемещает запись уведомления об активации компонента 
            с указанной задержкой времени относительно текущего процесса.
            с указанием событийного метода.
            <para>Если компонент находится в активном или пассивном состоянии, 
            создает новую запись уведомления</para>
            </summary>
            <param name="dt">Имитационное время активации компонента</param>
            <param name="nextProc">Событийный метод обработки планируемого события</param>
        </member>
        <member name="M:Simulation.Component.ReactivatePriorAt(System.Double)">
            <summary>
            Перемещает запись уведомления об активации компонента на указанное время 
            с приоритетом
            <para>Если компонент находится в активном или пассивном состоянии, 
            создает новую запись уведомления</para>
            </summary>
            <param name="t">Имитационное время активации процесса</param>
        </member>
        <member name="M:Simulation.Component.ReactivatePriorAt(System.Double,Simulation.EventProc)">
            <summary>
            Перемещает запись уведомления об активации компонента на указанное время
            с указанием событийного метода с приоритетом.
            <para>Если компонент находится в активном или пассивном состоянии, 
            создает новую запись уведомления</para>
            </summary>
            <param name="t">Имитационное время активации процесса</param>
            <param name="nextProc">Событийный метод обработки планируемого события</param>
        </member>
        <member name="M:Simulation.Component.ReactivatePriorDelay(System.Double)">
            <summary>
            Перемещает запись уведомления об активации компонента 
            с указанной задержкой времени относительно текущего процесса с приоритетом.
            <para>Если компонент находится в активном или пассивном состоянии, 
            создает новую запись уведомления</para>
            </summary>
            <param name="dt">Имитационное время активации компонента</param>
        </member>
        <member name="M:Simulation.Component.ReactivatePriorDelay(System.Double,Simulation.EventProc)">
            <summary>
            Перемещает запись уведомления об активации компонента 
            с указанной задержкой времени относительно текущего процесса с приоритетом.
            с указанием событийного метода.
            <para>Если компонент находится в активном или пассивном состоянии, 
            создает новую запись уведомления</para>
            </summary>
            <param name="dt">Имитационное время активации компонента</param>
            <param name="nextProc">Событийный метод обработки планируемого события</param>
        </member>
        <member name="M:Simulation.Component.Run">
            <summary>
            Обработка события компонента
            </summary>
            <returns>Ссылка на данный объект</returns>
        </member>
        <member name="M:Simulation.Component.SimTime">
            <summary>
            Возвращает текущее имитационное время. 
            Обращается к родительскому процесу имитации.
            </summary>
            <returns>Текущее имитационное время</returns>
        </member>
        <member name="M:Simulation.Component.StartRunning">
            <summary>
            Включение компонента в список свободных. 
            Используется также для извлечения компонента из очереди ожидания
            <para>Представлен для совместимости с классом Process 
            с целью более простого перехода от процессов к компонентам. 
            Реально в этом методе нет необходимости, поскольку в .NET 
            объекты, на которые нет ссылок, удаляются автоматически при сборке мусора</para>
            <para>Если в программе не используются процессы, а есть только компоненты, 
            этот метод, а также ClearFinished() и GoFinished(), не нужны</para>
            </summary>
        </member>
        <member name="M:Simulation.Component.Wait(Simulation.List)">
            <summary>
            Постановка компонента в очередь и перевод его в режим ожидания
            </summary>
            <param name="q">Очередь ожидания</param>
        </member>
        <member name="M:Simulation.Component.Wait(Simulation.List,Simulation.EventProc)">
            <summary>
            Постановка компонента в очередь и перевод его в режим ожидания
            с указанием событийного метода
            </summary>
            <param name="q">Очередь ожидания</param>
            <param name="nextProc">Событийный метод, который будет по умолчанию 
            установлен при следующем планировании события</param>
        </member>
        <member name="P:Simulation.Component.Event">
            <summary>
            Ссылка на уведомление о событии
            </summary>
        </member>
        <member name="P:Simulation.Component.Idle">
            <summary>
            Проверка, назначено ли событие компоненту
            </summary>
        </member>
        <member name="T:Simulation.Visualizer">
            <summary>
            Компонент-визуализатор. По истечении заданного интервала времени передает управление главному потоку программы
            </summary>
        </member>
        <member name="M:Simulation.Visualizer.#ctor(System.Double)">
            <summary>
            Конструктор
            </summary>
            <param name="interval">Интервал срабатывания визуализатора</param>
        </member>
        <member name="F:Simulation.Visualizer.Interval">
            <summary>
            Промежуток имитационного времени между срабатываниями визуализатора
            </summary>
        </member>
        <member name="M:Simulation.Visualizer.Run">
            <summary>
            Обработка события визуализатора.
            <para>Активирует новое событие с заданным интервалом времени и возвращает пустой указатель</para>
            </summary>
            <returns>null</returns>
        </member>
        <member name="T:Simulation.Collector">
            <summary>
            Класс Collector определяет компонент-сборщик завершенных процессов.
            Завершаемый процесс в конце своей работы должен встать в список
            завершенных процессов, выполнив метод GoFinished().
            Какой-либо из процессов имитации должен периодически вызывать метод
            ClearFinished(), который активирует данный объект.
            Одноименный метод класса Component не активирует данный компонент,
            а очищает список завершенных процессов непосредственно
            </summary>
        </member>
        <member name="M:Simulation.Collector.StartEvent">
            <summary>
            Событийный метод очистки списка завершенных процессов
            </summary>
        </member>
        <member name="T:Simulation.GridDisplay">
            <summary>
            Класс GridDisplay содержит методы расширения для отображения статистики и гистограмм в табличных сетках
            </summary>
        </member>
        <member name="M:Simulation.GridDisplay.InitForHist(System.Windows.Forms.DataGridView)">
            <summary>
            Подготавливает табличную сетку для отображения гистограммы. 
            Создает и настраивает необходимые столбцы.
            </summary>
            <param name="dgv">Табличная сетка для отображения гистограммы</param>
        </member>
        <member name="M:Simulation.GridDisplay.InitForStat(System.Windows.Forms.DataGridView)">
            <summary>
            Подготавливает табличную сетку для отображения точечной статистики. 
            Создает и настраивает необходимые столбцы.
            </summary>
            <param name="dgv">Табличная сетка для отображения статистики</param>
        </member>
        <member name="M:Simulation.GridDisplay.InitForIntervalStat(System.Windows.Forms.DataGridView)">
            <summary>
            Подготавливает табличную сетку для отображения интервальной статистики. 
            Создает и настраивает необходимые столбцы.
            </summary>
            <param name="dgv">Табличная сетка для отображения статистики</param>
        </member>
        <member name="M:Simulation.GridDisplay.InitForActionStat(System.Windows.Forms.DataGridView)">
            <summary>
            Подготавливает табличную сетку для отображения статистики действия. 
            Создает и настраивает необходимые столбцы.
            </summary>
            <param name="dgv">Табличная сетка для отображения статистики</param>
        </member>
        <member name="M:Simulation.GridDisplay.InitForServiceStat(System.Windows.Forms.DataGridView)">
            <summary>
            Подготавливает табличную сетку для отображения статистики обслуживающего действия. 
            Создает и настраивает необходимые столбцы.
            </summary>
            <param name="dgv">Табличная сетка для отображения статистики</param>
        </member>
        <member name="M:Simulation.GridDisplay.InitForQueueStat(System.Windows.Forms.DataGridView)">
            <summary>
            Подготавливает табличную сетку для отображения статистики очереди (списка). 
            Создает и настраивает необходимые столбцы.
            </summary>
            <param name="dgv">Табличная сетка для отображения статистики</param>
        </member>
        <member name="M:Simulation.GridDisplay.ShowStat(System.Windows.Forms.DataGridView,Simulation.Statistics[])">
            <summary>
            Отображает в табличной сетке результаты сбора точечной статистики.
            </summary>
            <param name="dgv">Табличная сетка для отображения</param>
            <param name="stat">Объекты статистики, которые следует отобразить</param>
        </member>
        <member name="M:Simulation.GridDisplay.ShowStat(System.Windows.Forms.DataGridView,Simulation.IntervalStatistics[])">
            <summary>
            Отображает в табличной сетке результаты сбора интервальной статистики.
            </summary>
            <param name="dgv">Табличная сетка для отображения</param>
            <param name="stat">Объекты статистики, которые следует отобразить</param>
        </member>
        <member name="M:Simulation.GridDisplay.ShowStat(System.Windows.Forms.DataGridView,Simulation.ActionStatistics[])">
            <summary>
            Отображает в табличной сетке результаты сбора статистики действия.
            </summary>
            <param name="dgv">Табличная сетка для отображения</param>
            <param name="stat">Объекты статистики, которые следует отобразить</param>
        </member>
        <member name="M:Simulation.GridDisplay.ShowStat(System.Windows.Forms.DataGridView,Simulation.ServiceStatistics[])">
            <summary>
            Отображает в табличной сетке результаты сбора статистики обслуживающего действия.
            </summary>
            <param name="dgv">Табличная сетка для отображения</param>
            <param name="stat">Объекты статистики, которые следует отобразить</param>
        </member>
        <member name="M:Simulation.GridDisplay.ShowStat(System.Windows.Forms.DataGridView,Simulation.List[])">
            <summary>
            Отображает в табличной сетке результаты сбора статистики по очередям.
            </summary>
            <param name="dgv">Табличная сетка для отображения</param>
            <param name="stat">Очереди, статистику по которым которые следует отобразить</param>
        </member>
        <member name="M:Simulation.GridDisplay.ShowHist(System.Windows.Forms.DataGridView,Simulation.Histogram)">
            <summary>
            Отображает гистограмму в табличной сетке. Работает совместно с событием DrawGridViewCellPainting
            </summary>
            <param name="dgv">Табличная сетка для отображения статистики</param>
            <param name="hist">Гистограмма, содержимое которой следует отобразить</param>
        </member>
        <member name="M:Simulation.GridDisplay.DrawCell(System.Windows.Forms.DataGridView,System.Windows.Forms.DataGridViewCellPaintingEventArgs,Simulation.Histogram)">
            <summary>
            Отображает графическое изображение элемента данных гистограммы в ячейке табличной сетки. 
            Вызывается из процедуры события DrawGridViewCellPainting
            </summary>
            <param name="dgv">Табличная сетка, в которой отображается гистограмма</param>
            <param name="e">Аргументы события DrawGridViewCellPainting</param>
            <param name="hist">Отображаемая гистограмма</param>
        </member>
        <member name="T:Simulation.Global">
            <summary>
            Класс Global содержит основные глобальные переменные и методы, управляющие процессом имитации.
            Выполняет переключение потоков в режиме сопрограмм.
            </summary>
        </member>
        <member name="F:Simulation.Global.CleanTimeStep">
            <summary>
            Периодичность срабатывания очистки завершенных объектов
            </summary>
        </member>
        <member name="F:Simulation.Global.CurrProc">
            <summary>
            Ссылка на текущую исполняемую сопрограмму
            </summary>
        </member>
        <member name="F:Simulation.Global.CurrSim">
            <summary>
            Текущая исполняемая имитация
            </summary>
        </member>
        <member name="F:Simulation.Global.Dispatch">
            <summary>
            Глобальный диспетчер, управляющий работой сопрограмм
            </summary>
        </member>
        <member name="M:Simulation.Global.ResumeDispatcher">
            <summary>
            Возобновляет приостановленное исполнение сопрограмм под управлением глобального диспетчера.
            <para>Если глобального диспетчера нет, порождается исключение</para>
            </summary>
        </member>
        <member name="M:Simulation.Global.RunDispatcher(Simulation.Coroutine)">
            <summary>
            Создает глобальный диспетчер, если его нет, и запускает исполнение сопрограмм под его управлением
            <para>Если глобальный диспетчер существует, запускает исполнение сопрограмм под его управлением</para>
            </summary>
            <param name="first">Сопрограмма, с которой начинается исполнение</param>
        </member>
        <member name="M:Simulation.Global.SimTime">
            <summary>
            Возвращает текущее имитационное время, соответствующее активной исполняемой имитации
            </summary>
            <returns>Текущее имитационное время</returns>
        </member>
        <member name="T:Simulation.ESimulationException">
            <summary>
            Класс ESimulationException - класс исключения имитации
            </summary>
        </member>
        <member name="M:Simulation.ESimulationException.#ctor(System.String)">
            <summary>
            Конструктор со строковым параметром
            </summary>
            <param name="message">Параметр - сообщение о причине исключения</param>
        </member>
        <member name="T:Simulation.Statistics">
            <summary>
            Класс <c>Statistics</c> собирает точечную статистику по независимым значениям
            </summary>
        </member>
        <member name="M:Simulation.Statistics.#ctor">
            <summary>
            Конструктор по умолчанию
            </summary>
        </member>
        <member name="M:Simulation.Statistics.#ctor(System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="AHeader">Заголовок для вывода на экран</param>
        </member>
        <member name="F:Simulation.Statistics.Header">
            <summary>
            Заголовок для вывода статистики на экран
            </summary>
        </member>
        <member name="F:Simulation.Statistics.SumX">
            <summary>
            Сумма величин
            </summary>
        </member>
        <member name="F:Simulation.Statistics.SumX_2">
            <summary>
            Сумма квадратов величин
            </summary>
        </member>
        <member name="M:Simulation.Statistics.AddData(System.Double)">
            <summary>
            Добавление нового значения к статистике
            </summary>
            <param name="newX">Добавляемое значение</param>
        </member>
        <member name="M:Simulation.Statistics.ClearStat">
            <summary>
            Очистка статистики, подготовка к новому сбору данных
            </summary>
        </member>
        <member name="M:Simulation.Statistics.Deviation">
            <summary>
            Возвращает стандартное отклонение накопленных значений
            </summary>
            <returns>Стандартное отклонение</returns>
        </member>
        <member name="M:Simulation.Statistics.Disperse">
            <summary>
            Возвращает дисперсию накопленных значений
            </summary>
            <returns>Дисперсия</returns>
        </member>
        <member name="M:Simulation.Statistics.Mean">
            <summary>
            Возвращает среднее арифметическое по накопленным данным
            </summary>
            <returns>Среднее арифметическое</returns>
        </member>
        <member name="M:Simulation.Statistics.ToString">
            <summary>
            Преобразует содержимое статистики в текст для отображения на экране
            </summary>
            <returns>Преобразованное содержимое</returns>
        </member>
        <member name="P:Simulation.Statistics.Count">
            <summary>
            Количество накопленных значений
            </summary>
        </member>
        <member name="P:Simulation.Statistics.Max">
            <summary>
            Максимальное значение среди накопленных
            </summary>
        </member>
        <member name="P:Simulation.Statistics.Min">
            <summary>
            Минимальное значение среди накопленных
            </summary>
        </member>
        <member name="T:Simulation.TimeBetStatistics">
            <summary>
            Класс <c>TimeBetStatistics</c> собирает точечную статистику по интервалам времени между событиями
            </summary>
        </member>
        <member name="M:Simulation.TimeBetStatistics.#ctor">
            <summary>
            Конструктор по умолчанию.
            </summary>
        </member>
        <member name="M:Simulation.TimeBetStatistics.#ctor(System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="AHeader">Заголовок для вывода на экран</param>
        </member>
        <member name="M:Simulation.TimeBetStatistics.AddData">
            <summary>
            Добавляет текущий момент имитационного времени, соответствующий активной имитации
            </summary>
        </member>
        <member name="M:Simulation.TimeBetStatistics.AddData(System.Double)">
            <summary>
            Добавляет новое значение как разность между значением параметра и последним добавленным значением
            </summary>
            <param name="newTime"></param>
        </member>
        <member name="M:Simulation.TimeBetStatistics.ClearStat">
            <summary>
            Приведение статистики в исходное состояние
            </summary>
        </member>
        <member name="T:Simulation.IntervalStatistics">
            <summary>
            Класс <c>IntervalStatistics</c> собирает интервальную статистику по значениям, дискретно меняющимся во времени
            </summary>
        </member>
        <member name="M:Simulation.IntervalStatistics.#ctor(System.Double)">
            <summary>
            Конструктор. Создает объект интервальной статистики в текущий момент имитационного времени.
            </summary>
            <param name="initX">Начальное значение наблюдаемой величины</param>
        </member>
        <member name="M:Simulation.IntervalStatistics.#ctor(System.Double,System.Double)">
            <summary>
            Конструктор. Создает объект интервальной статистики в заданный момент имитационного времени.
            </summary>
            <param name="initX">Начальное значение наблюдаемой величины</param>
            <param name="initTime">Момент времени, когда создается объект</param>
        </member>
        <member name="F:Simulation.IntervalStatistics.Header">
            <summary>
            Заголовок для вывода статистики на экран
            </summary>
        </member>
        <member name="F:Simulation.IntervalStatistics.LastTime">
            <summary>
            Момент последнего изменения величины
            </summary>
        </member>
        <member name="F:Simulation.IntervalStatistics.LastX">
            <summary>
            Значение величины с момента последнего изменения
            </summary>
        </member>
        <member name="F:Simulation.IntervalStatistics.SumX">
            <summary>
            Интеграл наблюдаемой величины по времени
            </summary>
        </member>
        <member name="F:Simulation.IntervalStatistics.SumX_2">
            <summary>
            Интеграл квадрата наблюдаемой величины по времени
            </summary>
        </member>
        <member name="M:Simulation.IntervalStatistics.AddData(System.Double)">
            <summary>
            Добавление нового значения наблюдаемой величины к статистике в текущий момент имитационного времени.
            Фактически учитывается статистика за промежуток времени с последнего изменения до текущего.
            Указанное значение запоминается для учета в будущем.
            </summary>
            <param name="newX">Новое значение наблюдаемой величины</param>
        </member>
        <member name="M:Simulation.IntervalStatistics.AddData(System.Double,System.Double)">
            <summary>
            Добавление нового значения наблюдаемой величины к статистике с указанием момента времени, когда оно изменяется.
            Фактически учитывается статистика за промежуток времени с последнего изменения до текущего.
            Указанное значение запоминается для учета в будущем.
            </summary>
            <param name="newX">Новое значение наблюдаемой величины</param>
            <param name="newTime">Имитационное время в момент изменения</param>
        </member>
        <member name="M:Simulation.IntervalStatistics.ClearStat">
            <summary>
            Очистка статистики, подготовка к новому сбору данных в текущий момент имитационного времени
            </summary>
        </member>
        <member name="M:Simulation.IntervalStatistics.ClearStat(System.Double)">
            <summary>
            Очистка статистики, подготовка к новому сбору данных в заданный момент имитационного времени
            </summary>
            <param name="newTime"></param>
        </member>
        <member name="M:Simulation.IntervalStatistics.Deviation">
            <summary>
            Возвращает стандартное отклонение накопленных значений
            </summary>
            <returns>Стандартное отклонение</returns>
        </member>
        <member name="M:Simulation.IntervalStatistics.Disperse">
            <summary>
            Возвращает дисперсию накопленных значений
            </summary>
            <returns>Дисперсия</returns>
        </member>
        <member name="M:Simulation.IntervalStatistics.Mean">
            <summary>
            Возвращает среднее арифметическое по накопленным данным
            </summary>
            <returns>Среднее арифметическое</returns>
        </member>
        <member name="M:Simulation.IntervalStatistics.StopStat">
            <summary>
            Коррекция статистики к текущему имитационному времени.
            Учитывается интервал времени, прошедший с момента последнего изменения или коррекции.
            </summary>
        </member>
        <member name="M:Simulation.IntervalStatistics.StopStat(System.Double)">
            <summary>
            Коррекция статистики к заданному имитационному времени.
            Учитывается интервал времени, прошедший с момента последнего изменения или коррекции.
            </summary>
            <param name="newTime">Имитационное время момента коррекции статистики</param>
        </member>
        <member name="M:Simulation.IntervalStatistics.ToString">
            <summary>
            Преобразует содержимое статистики в текст для отображения на экране
            </summary>
            <returns>Преобразованное содержимое</returns>
        </member>
        <member name="P:Simulation.IntervalStatistics.Max">
            <summary>
            Максимальное значение среди накопленных
            </summary>
        </member>
        <member name="P:Simulation.IntervalStatistics.Min">
            <summary>
            Минимальное значение среди накопленных
            </summary>
        </member>
        <member name="P:Simulation.IntervalStatistics.TotalTime">
            <summary>
            Общее время наблюдения со сбором статистики
            </summary>
        </member>
        <member name="T:Simulation.ActionStatistics">
            <summary>
            Класс ActionStatistics собирает статистику по действиям
            </summary>
        </member>
        <member name="M:Simulation.ActionStatistics.#ctor">
            <summary>
            Конструктор. Создает объект статистики действия в текущий момент имитационного времени.
            </summary>
        </member>
        <member name="M:Simulation.ActionStatistics.#ctor(System.Int32)">
            <summary>
            Конструктор. Создает объект статистики действия в текущий момент имитационного времени.
            </summary>
            <param name="initX">Начальное значение наблюдаемой величины</param>
        </member>
        <member name="M:Simulation.ActionStatistics.#ctor(System.Int32,System.Double)">
            <summary>
            Конструктор. Создает объект статистики действия в заданный момент имитационного времени.
            </summary>
            <param name="initX">Начальное значение наблюдаемой величины</param>
            <param name="initTime">Момент времени, когда создается объект</param>
        </member>
        <member name="M:Simulation.ActionStatistics.#ctor(System.Int32,System.Double,System.String)">
            <summary>
            Конструктор. Создает объект статистики действия в заданный момент имитационного времени.
            </summary>
            <param name="initX">Начальное значение наблюдаемой величины</param>
            <param name="initTime">Момент времени, когда создается объект</param>
            <param name="aHeader">Заголовок для вывода статистики</param>
        </member>
        <member name="M:Simulation.ActionStatistics.#ctor(System.Int32,System.String)">
            <summary>
            Конструктор. Создает объект статистики действия в текущий момент имитационного времени.
            </summary>
            <param name="initX">Начальное значение наблюдаемой величины</param>
            <param name="aHeader">Заголовок для вывода статистики</param>
        </member>
        <member name="M:Simulation.ActionStatistics.#ctor(System.String)">
            <summary>
            Конструктор. Создает объект статистики действия в текущий момент имитационного времени.
            </summary>
            <param name="aHeader">Заголовок для вывода статистики</param>
        </member>
        <member name="F:Simulation.ActionStatistics.Header">
            <summary>
            Заголовок для вывода статистики на экран
            </summary>
        </member>
        <member name="F:Simulation.ActionStatistics.LastTime">
            <summary>
            Момент последнего изменения величины
            </summary>
        </member>
        <member name="F:Simulation.ActionStatistics.SumX">
            <summary>
            Интеграл наблюдаемой величины по времени
            </summary>
        </member>
        <member name="F:Simulation.ActionStatistics.SumX_2">
            <summary>
            Интеграл квадрата наблюдаемой величины по времени
            </summary>
        </member>
        <member name="M:Simulation.ActionStatistics.ClearStat">
            <summary>
            Очистка статистики, подготовка к новому сбору данных в текущий момент имитационного времени
            </summary>
        </member>
        <member name="M:Simulation.ActionStatistics.ClearStat(System.Double)">
            <summary>
            Очистка статистики, подготовка к новому сбору данных в заданный момент имитационного времени
            </summary>
            <param name="newTime"></param>
        </member>
        <member name="M:Simulation.ActionStatistics.Deviation">
            <summary>
            Возвращает стандартное отклонение накопленных значений
            </summary>
            <returns>Стандартное отклонение</returns>
        </member>
        <member name="M:Simulation.ActionStatistics.Disperse">
            <summary>
            Возвращает дисперсию накопленных значений
            </summary>
            <returns>Дисперсия</returns>
        </member>
        <member name="M:Simulation.ActionStatistics.Finish">
            <summary>
            Отметить окончание действия в текущий момент времени
            </summary>
        </member>
        <member name="M:Simulation.ActionStatistics.Finish(System.Double)">
            <summary>
            Отметить окончание действия в заданный момент времени
            </summary>
            <param name="newTime">Время окончания действия</param>
        </member>
        <member name="M:Simulation.ActionStatistics.Mean">
            <summary>
            Возвращает среднее арифметическое по накопленным данным
            </summary>
            <returns>Среднее арифметическое</returns>
        </member>
        <member name="M:Simulation.ActionStatistics.Preempt">
            <summary>
            Отметить приостановку действия в текущий момент времени
            </summary>
        </member>
        <member name="M:Simulation.ActionStatistics.Preempt(System.Double)">
            <summary>
            Отметить приостановку действия в заданный момент времени
            </summary>
            <param name="newTime">Время приостановки действия</param>
        </member>
        <member name="M:Simulation.ActionStatistics.Resume">
            <summary>
            Отметить возобновление действия в текущий момент времени
            </summary>
        </member>
        <member name="M:Simulation.ActionStatistics.Resume(System.Double)">
            <summary>
            Отметить возобновление действия в заданный момент времени
            </summary>
            <param name="newTime">Время возобновления действия</param>
        </member>
        <member name="M:Simulation.ActionStatistics.Start">
            <summary>
            Отметить начало действия в текущий момент времени
            </summary>
        </member>
        <member name="M:Simulation.ActionStatistics.Start(System.Double)">
            <summary>
            Отметить начало действия в заданный момент времени
            </summary>
            <param name="newTime">Время начала действия</param>
        </member>
        <member name="M:Simulation.ActionStatistics.StopStat">
            <summary>
            Коррекция статистики к текущему имитационному времени.
            Учитывается интервал времени, прошедший с момента последнего изменения или коррекции.
            </summary>
        </member>
        <member name="M:Simulation.ActionStatistics.StopStat(System.Double)">
            <summary>
            Коррекция статистики к заданному имитационному времени.
            Учитывается интервал времени, прошедший с момента последнего изменения или коррекции.
            </summary>
            <param name="newTime">Имитационное время момента коррекции статистики</param>
        </member>
        <member name="M:Simulation.ActionStatistics.ToString">
            <summary>
            Преобразует содержимое статистики в текст для отображения на экране
            </summary>
            <returns>Преобразованное содержимое</returns>
        </member>
        <member name="P:Simulation.ActionStatistics.Finished">
            <summary>
            Количество завершенный действий
            </summary>
        </member>
        <member name="P:Simulation.ActionStatistics.Max">
            <summary>
            Максимальное значение среди накопленных
            </summary>
        </member>
        <member name="P:Simulation.ActionStatistics.Running">
            <summary>
            Количество исполняемых действий
            </summary>
        </member>
        <member name="P:Simulation.ActionStatistics.TotalTime">
            <summary>
            Общее время наблюдения со сбором статистики
            </summary>
        </member>
        <member name="T:Simulation.ServiceStatistics">
            <summary>
            Класс ServiceStatistics собирает статистику по обслуживающим действиям
            </summary>
        </member>
        <member name="M:Simulation.ServiceStatistics.#ctor">
            <summary>
            Конструктор. Создает объект статистики обслуживающего действия для одного устройства в текущий момент имитационного времени.
            </summary>
        </member>
        <member name="M:Simulation.ServiceStatistics.#ctor(System.Int32)">
            <summary>
            Конструктор. Создает объект статистики обслуживающего действия в текущий момент имитационного времени.
            </summary>
            <param name="initDevices">Начальное количество обслуживающих устройств</param>
        </member>
        <member name="M:Simulation.ServiceStatistics.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Конструктор. Создает объект статистики обслуживающего действия в заданный момент имитационного времени.
            </summary>
            <param name="initDevices">Начальное количество обслуживающих устройств</param>
            <param name="initUtil">Начальное количество занятых устройств</param>
            <param name="initTime">Момент времени, когда создается объект</param>
        </member>
        <member name="M:Simulation.ServiceStatistics.#ctor(System.Int32,System.Int32,System.Double,System.String)">
            <summary>
            Конструктор. Создает объект статистики обслуживающего действия в заданный момент имитационного времени.
            </summary>
            <param name="initDevices">Начальное количество обслуживающих устройств</param>
            <param name="initUtil">Начальное количество занятых устройств</param>
            <param name="initTime">Момент времени, когда создается объект</param>
            <param name="aHeader">Заголовок при отображении статистики на экране</param>
        </member>
        <member name="M:Simulation.ServiceStatistics.#ctor(System.Int32,System.String)">
            <summary>
            Конструктор. Создает объект статистики обслуживающего действия в текущий момент имитационного времени.
            </summary>
            <param name="initDevices">Начальное количество обслуживающих устройств</param>
            <param name="aHeader">Заголовок при отображении статистики на экране</param>
        </member>
        <member name="M:Simulation.ServiceStatistics.#ctor(System.String)">
            <summary>
            Конструктор. Создает объект статистики обслуживающего действия для одного устройства в текущий момент имитационного времени.
            </summary>
            <param name="aHeader">Заголовок при отображении статистики на экране</param>
        </member>
        <member name="F:Simulation.ServiceStatistics.Header">
            <summary>
            Заголовок для вывода статистики на экран
            </summary>
        </member>
        <member name="F:Simulation.ServiceStatistics.LastBlockage">
            <summary>
            Текущее количество заблокированных устройств
            </summary>
        </member>
        <member name="F:Simulation.ServiceStatistics.LastBlockTime">
            <summary>
            Последнее время нахождения в заблокированном состоянии
            </summary>
        </member>
        <member name="F:Simulation.ServiceStatistics.LastBusyStart">
            <summary>
            Момент начала занятого состояния
            </summary>
        </member>
        <member name="F:Simulation.ServiceStatistics.LastBusyTime">
            <summary>
            Последнее время нахождения в занятом состоянии
            </summary>
        </member>
        <member name="F:Simulation.ServiceStatistics.LastIdleStart">
            <summary>
            Момент начала свободного состояния
            </summary>
        </member>
        <member name="F:Simulation.ServiceStatistics.LastIdleTime">
            <summary>
            Последнее время нахождения в свободном состоянии
            </summary>
        </member>
        <member name="F:Simulation.ServiceStatistics.LastTime">
            <summary>
            Момент последнего изменения величины
            </summary>
        </member>
        <member name="F:Simulation.ServiceStatistics.SumBlockage">
            <summary>
            Суммарное время нахождения в заблокированном состоянии
            </summary>
        </member>
        <member name="F:Simulation.ServiceStatistics.SumX">
            <summary>
            Интеграл наблюдаемой величины по времени
            </summary>
        </member>
        <member name="F:Simulation.ServiceStatistics.SumX_2">
            <summary>
            Интеграл квадрата наблюдаемой величины по времени
            </summary>
        </member>
        <member name="M:Simulation.ServiceStatistics.ClearStat">
            <summary>
            Очистка статистики, подготовка к новому сбору данных в текущий момент имитационного времени
            </summary>
        </member>
        <member name="M:Simulation.ServiceStatistics.ClearStat(System.Double)">
            <summary>
            Очистка статистики, подготовка к новому сбору данных в заданный момент имитационного времени
            </summary>
            <param name="newTime"></param>
        </member>
        <member name="M:Simulation.ServiceStatistics.Deviation">
            <summary>
            Возвращает стандартное отклонение накопленных значений
            </summary>
            <returns>Стандартное отклонение</returns>
        </member>
        <member name="M:Simulation.ServiceStatistics.Disperse">
            <summary>
            Возвращает дисперсию накопленных значений
            </summary>
            <returns>Дисперсия</returns>
        </member>
        <member name="M:Simulation.ServiceStatistics.Finish">
            <summary>
            Отметить окончание действия в текущий момент времени
            </summary>
        </member>
        <member name="M:Simulation.ServiceStatistics.Finish(System.Double)">
            <summary>
            Отметить окончание действия в заданный момент времени
            </summary>
            <param name="newTime">Время окончания действия</param>
        </member>
        <member name="M:Simulation.ServiceStatistics.FinishBlock">
            <summary>
            Отметить окончание блокировки в текущий момент времени
            </summary>
        </member>
        <member name="M:Simulation.ServiceStatistics.FinishBlock(System.Double)">
            <summary>
            Отметить окончание блокирвки в заданный момент времени
            </summary>
            <param name="newTime">Время окончания блокировки</param>
        </member>
        <member name="M:Simulation.ServiceStatistics.Mean">
            <summary>
            Возвращает среднее арифметическое количество используемых устройств
            </summary>
            <returns>Среднее арифметическое</returns>
        </member>
        <member name="M:Simulation.ServiceStatistics.MeanBlockage">
            <summary>
            Возвращает среднее арифметическое количество заблокированных устройств
            </summary>
            <returns>Среднее арифметическое</returns>
        </member>
        <member name="M:Simulation.ServiceStatistics.Start">
            <summary>
            Отметить начало действия в текущий момент времени
            </summary>
        </member>
        <member name="M:Simulation.ServiceStatistics.Start(System.Double)">
            <summary>
            Отметить начало действия в заданный момент времени
            </summary>
            <param name="newTime">Время начала действия</param>
        </member>
        <member name="M:Simulation.ServiceStatistics.StartBlock">
            <summary>
            Отметить начало блокировки в текущий момент времени
            </summary>
        </member>
        <member name="M:Simulation.ServiceStatistics.StartBlock(System.Double)">
            <summary>
            Отметить начало блокировки в заданный момент времени
            </summary>
            <param name="newTime">Время начала действия</param>
        </member>
        <member name="M:Simulation.ServiceStatistics.StopStat">
            <summary>
            Коррекция статистики к текущему имитационному времени.
            Учитывается интервал времени, прошедший с момента последнего изменения или коррекции.
            </summary>
        </member>
        <member name="M:Simulation.ServiceStatistics.StopStat(System.Double)">
            <summary>
            Коррекция статистики к заданному имитационному времени.
            Учитывается интервал времени, прошедший с момента последнего изменения или коррекции.
            </summary>
            <param name="newTime">Имитационное время момента коррекции статистики</param>
        </member>
        <member name="M:Simulation.ServiceStatistics.ToString">
            <summary>
            Преобразует содержимое статистики в текст для отображения на экране
            </summary>
            <returns>Преобразованное содержимое</returns>
        </member>
        <member name="P:Simulation.ServiceStatistics.Devices">
            <summary>
            Количество доступных устройств
            </summary>
        </member>
        <member name="P:Simulation.ServiceStatistics.Finished">
            <summary>
            Количество завершенный действий
            </summary>
        </member>
        <member name="P:Simulation.ServiceStatistics.MaxBusy">
            <summary>
            Максимальное количество используемых устройств
            </summary>
        </member>
        <member name="P:Simulation.ServiceStatistics.MaxBusyTime">
            <summary>
            Максимальное время непрерывной занятости
            </summary>
        </member>
        <member name="P:Simulation.ServiceStatistics.MaxIdleTime">
            <summary>
            Максимальное время свободного состояния
            </summary>
        </member>
        <member name="P:Simulation.ServiceStatistics.MinBusy">
            <summary>
            Минимальное количество занятых устройств
            </summary>
        </member>
        <member name="P:Simulation.ServiceStatistics.Running">
            <summary>
            Количество занятых устройств
            </summary>
        </member>
        <member name="P:Simulation.ServiceStatistics.TotalTime">
            <summary>
            Общее время наблюдения со сбором статистики
            </summary>
        </member>
        <member name="T:Simulation.HistogramBase">
            <summary>
            Класс <c>HistogramBase</c> содержит общие средства для точечных и интервальных гистограмм
            </summary>
        </member>
        <member name="M:Simulation.HistogramBase.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Конструктор
            </summary>
            <param name="ALow">Нижняя граница первого конечного интервала</param>
            <param name="AStep">Шаг каждого конечного интервала</param>
            <param name="AIntervalCount">Количество конечных интервалов</param>
        </member>
        <member name="M:Simulation.HistogramBase.#ctor(System.Double,System.Double,System.Int32,System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="ALow">Нижняя граница первого конечного интервала</param>
            <param name="AStep">Шаг каждого конечного интервала</param>
            <param name="AIntervalCount">Количество конечных интервалов</param>
            <param name="AHeader">Заголовок для вывода на консоль</param>
        </member>
        <member name="F:Simulation.HistogramBase.Header">
            <summary>
            Заголовок гистограммы при выводе
            </summary>
        </member>
        <member name="M:Simulation.HistogramBase.Clear">
            <summary>
            Очищает гистограмму
            </summary>
        </member>
        <member name="M:Simulation.HistogramBase.CumulativePercent(System.Int32)">
            <summary>
            Возвращает долю от общего количества значений, попавших в интервалы от левого до указанного
            </summary>
            <param name="index">Индекс интервала</param>
            <returns>Доля количества значений</returns>
        </member>
        <member name="M:Simulation.HistogramBase.Percent(System.Int32)">
            <summary>
            Возвращает долю от общего количества значений, попавших в указанный интервал
            </summary>
            <param name="index">Индекс интервала</param>
            <returns>Доля количества значений</returns>
        </member>
        <member name="M:Simulation.HistogramBase.IntervalIndex(System.Double)">
            <summary>
            Возвращает индекс интервала, в который попадает указанное значение.
            <para>Результат равен 0, если значение меньше нижней границы левого конечного интервала (<c>Low</c>).</para>
            <para>Результат равен <c>IntervalCount + 1</c>, если значение больше или равно верхней границе последнего конечного интервала</para>
            </summary>
            <param name="val">Значение, индекс для которого требуется определить</param>
            <returns>Индекс интервала</returns>
        </member>
        <member name="M:Simulation.HistogramBase.LowerBound(System.Int32)">
            <summary>
            Возвращает левую (нижнюю) границу указанного интервала.
            <para>Если индекс интервала отрицателен, возвращает значение "минус бесконечность".</para>
            <para>Если индекс интервала превышает максимально возможный, возвращает левую границу правого полубесконечного интервала</para>
            </summary>
            <param name="index">Индекс интервала</param>
            <returns>Левая граница интервала</returns>
        </member>
        <member name="M:Simulation.HistogramBase.UpperBound(System.Int32)">
            <summary>
            Возвращает правую (верхнюю) границу указанного интервала.
            <para>Если индекс интервала отрицателен, возвращает правую границу левого полубесконечного интервала</para>
            <para>Если индекс интервала превышает максимально возможный, возвращает значение "плюс бесконечность".</para>
            </summary>
            <param name="index">Индекс интервала</param>
            <returns>Правая граница интервала</returns>
        </member>
        <member name="P:Simulation.HistogramBase.IntervalCount">
            <summary>
            Количество конечных интевалов.
            <para>Общее количество интервалов гистограммы на 2 больше, так как она включает еще два
            полубесконечных интервала с каждой стороны</para>
            </summary>
        </member>
        <member name="P:Simulation.HistogramBase.Low">
            <summary>
            Нижняя граница первого конечного интервала
            </summary>
        </member>
        <member name="P:Simulation.HistogramBase.Step">
            <summary>
            Шаг каждого конечного интервала
            </summary>
        </member>
        <member name="T:Simulation.Histogram">
            <summary>
            Класс <c>Histogram</c> собирает данные по количеству значений, попадающих в заданные интервалы
            </summary>
        </member>
        <member name="M:Simulation.Histogram.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Конструктор
            </summary>
            <param name="ALow">Нижняя граница первого конечного интервала</param>
            <param name="AStep">Шаг каждого конечного интервала</param>
            <param name="AIntervalCount">Количество конечных интервалов</param>
        </member>
        <member name="M:Simulation.Histogram.#ctor(System.Double,System.Double,System.Int32,System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="ALow">Нижняя граница первого конечного интервала</param>
            <param name="AStep">Шаг каждого конечного интервала</param>
            <param name="AIntervalCount">Количество конечных интервалов</param>
            <param name="AHeader">Заголовок при выводе на экран</param>
        </member>
        <member name="F:Simulation.Histogram.Data">
            <summary>
            Массив, в котором содержится количество значений, попадающее в каждый интервал
            </summary>
        </member>
        <member name="M:Simulation.Histogram.AddData(System.Double)">
            <summary>
            Добавляет к гистограмме новое значение. Увеличивает на 1 элемент массива, соответствующий добавляемой величине, 
            и общее количество значений
            </summary>
            <param name="newData">Добавляемое значение</param>
        </member>
        <member name="M:Simulation.Histogram.Clear">
            <summary>
            Очищает гистограмму, записывая нулевые значения во все элементы массива и обнуляя счетчик значений
            </summary>
        </member>
        <member name="M:Simulation.Histogram.Count(System.Int32)">
            <summary>
            Возвращает количество значений, попавших в указанный интервал
            </summary>
            <param name="index">Индекс интервала</param>
            <returns>Количество значений</returns>
        </member>
        <member name="M:Simulation.Histogram.CumulativeCount(System.Int32)">
            <summary>
            Общее количество значений, попавших в интервалы от крайнего левого до указанного
            </summary>
            <param name="index">Индекс интервала</param>
            <returns>Общее количество значений</returns>
        </member>
        <member name="M:Simulation.Histogram.CumulativePercent(System.Int32)">
            <summary>
            Возвращает долю от общего количества значений, попавших в интервалы от левого до указанного
            </summary>
            <param name="index">Индекс интервала</param>
            <returns>Доля количества значений</returns>
        </member>
        <member name="M:Simulation.Histogram.Percent(System.Int32)">
            <summary>
            Возвращает долю от общего количества значений, попавших в указанный интервал
            </summary>
            <param name="index">Индекс интервала</param>
            <returns>Доля количества значений</returns>
        </member>
        <member name="M:Simulation.Histogram.ToString">
            <summary>
            Отображает содержимое гистограммы в текстовом виде для отображения на экране
            </summary>
            <returns>Текстовый вид гистограммы</returns>
        </member>
        <member name="P:Simulation.Histogram.TotalCount">
            <summary>
            Общее количество записанных значений
            </summary>
        </member>
        <member name="T:Simulation.IntervalHistogram">
            <summary>
            Класс <c>IntervalHistogram</c> собирает данные по промежуткам времени, в течение которые значение находилось в заданных интервалах
            </summary>
        </member>
        <member name="M:Simulation.IntervalHistogram.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Конструктор
            </summary>
            <param name="ALow">Нижняя граница первого конечного интервала</param>
            <param name="AStep">Шаг каждого конечного интервала</param>
            <param name="AIntervalCount">Количество конечных интервалов</param>
        </member>
        <member name="M:Simulation.IntervalHistogram.#ctor(System.Double,System.Double,System.Int32,System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="ALow">Нижняя граница первого конечного интервала</param>
            <param name="AStep">Шаг каждого конечного интервала</param>
            <param name="AIntervalCount">Количество конечных интервалов</param>
            <param name="AHeader">Заголовок при выводе на экран</param>
        </member>
        <member name="F:Simulation.IntervalHistogram.Data">
            <summary>
            Массив, в котором содержится время, в течение которого значение величины находилось в каждом интервале
            </summary>
        </member>
        <member name="M:Simulation.IntervalHistogram.AddData(System.Double,System.Double)">
            <summary>
            Добавляет к гистограмме новое значение. Увеличивает на <c>dTime</c> элемент массива, соответствующий добавляемой величине, 
            и общее количество значений
            </summary>
            <param name="newData">Добавляемое значение</param>
            <param name="dTime">Время, в течение которого величина принимала указанное значение</param>
        </member>
        <member name="M:Simulation.IntervalHistogram.Clear">
            <summary>
            Очищает гистограмму, записывая нулевые значения во все элементы массива и обнуляя общее время
            </summary>
        </member>
        <member name="M:Simulation.IntervalHistogram.CumulativePercent(System.Int32)">
            <summary>
            Возвращает долю от общего времени, в течение которого значение попадало в интервалы от левого до указанного
            </summary>
            <param name="index">Индекс интервала</param>
            <returns>Доля времени</returns>
        </member>
        <member name="M:Simulation.IntervalHistogram.CumulativeTime(System.Int32)">
            <summary>
            Общий промежуток времени, в течение которого значение попадало в интервалы от крайнего левого до указанного
            </summary>
            <param name="index">Индекс интервала</param>
            <returns>Общий промежуток времени</returns>
        </member>
        <member name="M:Simulation.IntervalHistogram.Percent(System.Int32)">
            <summary>
            Возвращает долю от общего времени, в течение которого значение попадало в указанный интервал
            </summary>
            <param name="index">Индекс интервала</param>
            <returns>Доля времени</returns>
        </member>
        <member name="M:Simulation.IntervalHistogram.Time(System.Int32)">
            <summary>
            Возвращает суммарное время, в течение которого значение находилось в указанном интервале
            </summary>
            <param name="index">Индекс интервала</param>
            <returns>Суммарное время</returns>
        </member>
        <member name="M:Simulation.IntervalHistogram.ToString">
            <summary>
            Отображает содержимое гистограммы в текстовом виде для отображения на экране
            </summary>
            <returns>Текстовый вид гистограммы</returns>
        </member>
        <member name="P:Simulation.IntervalHistogram.TotalTime">
            <summary>
            Суммарное время записанных значений
            </summary>
        </member>
        <member name="T:Simulation.DirectEvent">
            <summary>
            Класс DirectEvent позволяет прямо планировать события, связанные с любыми объектами.
            События, спланированные с помощью этого класса, не предназначены для
            последующих манипуляций - удаления, реактивации и т. п.
            </summary>
        </member>
        <member name="M:Simulation.DirectEvent.#ctor(Simulation.EventProc)">
            <summary>
            Конструктор
            </summary>
            <param name="proc">Метод обработки планируемого события</param>
        </member>
        <member name="F:Simulation.DirectEvent.Proc">
            <summary>
            Событийный метод
            </summary>
        </member>
        <member name="M:Simulation.DirectEvent.Activate">
            <summary>
            Помещает запись уведомления об активации процесса непосредственно после текущего.
            <para>Если процесс находится в активном или приостановленном состоянии, ничего не делает</para>
            </summary>
        </member>
        <member name="M:Simulation.DirectEvent.ActivateAfter(Simulation.EventNotice)">
            <summary>
            Помещает запись уведомления о событии непосредственно после указанной записи
            </summary>
            <param name="en">Запись, после которой следует активировать событие</param>
        </member>
        <member name="M:Simulation.DirectEvent.ActivateAfter(Simulation.ISchedulable)">
            <summary>
            Помещает запись уведомления о событии непосредственно после записи указанного процесса
            <para>Если процесс-параметр находится в пассивном или завершенном состоянии, порождается исключение</para>
            </summary>
            <param name="act">Процесс, после которого следует активировать событие</param>
        </member>
        <member name="M:Simulation.DirectEvent.ActivateAt(System.Double)">
            <summary>
            Помещает запись уведомления о событии в указанное время
            </summary>
            <param name="t">Имитационное время активации события</param>
        </member>
        <member name="M:Simulation.DirectEvent.ActivateBefore(Simulation.EventNotice)">
            <summary>
            Помещает запись уведомления о событии непосредственно перед указанной записью
            </summary>
            <param name="en">Запись, перед которой следует активировать событие</param>
        </member>
        <member name="M:Simulation.DirectEvent.ActivateBefore(Simulation.ISchedulable)">
            <summary>
            Помещает запись уведомления о событии непосредственно перед записью указанного процесса
            <para>Если процесс-параметр находится в пассивном или завершенном состоянии, порождается исключение</para>
            </summary>
            <param name="act">Процесс, перед которым следует активировать событие</param>
        </member>
        <member name="M:Simulation.DirectEvent.ActivateDelay(System.Double)">
            <summary>
            Помещает запись уведомления о событии с указанной задержкой времени
            </summary>
            <param name="dt">Задержка относительно текущего имитационного времени</param>
        </member>
        <member name="M:Simulation.DirectEvent.ActivatePriorAt(System.Double)">
            <summary>
            Помещает запись уведомления о событии в указанное время с приоритетом
            </summary>
            <param name="t">Имитационное время активации события</param>
        </member>
        <member name="M:Simulation.DirectEvent.ActivatePriorDelay(System.Double)">
            <summary>
            Помещает запись уведомления о событии с указанной задержкой времени с приоритетом
            </summary>
            <param name="dt">Задержка относительно текущего имитационного времени</param>
        </member>
        <member name="M:Simulation.DirectEvent.RunEvent">
            <summary>
            ОБработка события
            </summary>
            <returns>Объект класса ContinueSim</returns>
        </member>
        <member name="M:Simulation.DirectEvent.SimTime">
            <summary>
            Возвращает текущее имитацинное время
            </summary>
            <returns>Имитационное время</returns>
        </member>
        <member name="T:Simulation.Activators">
            <summary>
            Класс Activators содержит методы расширения для активации массивов и списков процессов
            </summary>
        </member>
        <member name="M:Simulation.Activators.ActivateAll(Simulation.ISchedulable[])">
            <summary>
            Активирует все пассивные процессы в массиве.
            Активные и приостановленные процессы игнорируются
            </summary>
            <param name="act">Массив ссылок на процессы</param>
        </member>
        <member name="M:Simulation.Activators.ActivateAll(Simulation.List)">
            <summary>
            Активирует все пассивные процессы в списке.
            Активные и приостановленные процессы, а также ячейки, не являющиеся процессами, игнорируются
            </summary>
            <param name="act">Список, в котором могут находиться процессы</param>
        </member>
        <member name="M:Simulation.Activators.ActivateAllAfter(Simulation.ISchedulable[],Simulation.ISchedulable)">
            <summary>
            Активирует все пассивные процессы в массиве после указанного события.
            Активные и приостановленные процессы игнорируются
            </summary>
            <param name="act">Массив ссылок на процессы</param>
            <param name="act2">Событие, после которого следует активировать процессы из массива</param>
        </member>
        <member name="M:Simulation.Activators.ActivateAllAfter(Simulation.List,Simulation.ISchedulable)">
            <summary>
            Активирует все пассивные процессы в списке после указанного события.
            Активные и приостановленные процессы, а также ячейки, не являющиеся процессами, игнорируются
            </summary>
            <param name="act">Список, в котором могут находиться процессы</param>
            <param name="act2">Событие, после которого следует активировать процессы из списка</param>
        </member>
        <member name="M:Simulation.Activators.ActivateAllAt(Simulation.ISchedulable[],System.Double)">
            <summary>
            Активирует все пассивные процессы в массиве в заданный момент времени.
            Активные и приостановленные процессы игнорируются
            </summary>
            <param name="act">Массив ссылок на процессы</param>
            <param name="t">Время активации всех процессов массива</param>
        </member>
        <member name="M:Simulation.Activators.ActivateAllAt(Simulation.List,System.Double)">
            <summary>
            Активирует все пассивные процессы в списке в заданный момент времени.
            Активные и приостановленные процессы, а также ячейки, не являющиеся процессами, игнорируются
            </summary>
            <param name="act">Список, в котором могут находиться процессы</param>
            <param name="t">Время активации всех процессов из списка</param>
        </member>
        <member name="M:Simulation.Activators.ActivateAllBefore(Simulation.ISchedulable[],Simulation.ISchedulable)">
            <summary>
            Активирует все пассивные процессы в массиве перед указанным событием.
            Активные и приостановленные процессы игнорируются
            </summary>
            <param name="act">Массив ссылок на процессы</param>
            <param name="act2">Событие, перед которым следует активировать процессы из массива</param>
        </member>
        <member name="M:Simulation.Activators.ActivateAllBefore(Simulation.List,Simulation.ISchedulable)">
            <summary>
            Активирует все пассивные процессы в списке перед указанным событием.
            Активные и приостановленные процессы, а также ячейки, не являющиеся процессами, игнорируются
            </summary>
            <param name="act">Список, в котором могут находиться процессы</param>
            <param name="act2">Событие, перед которым следует активировать процессы из списка</param>
        </member>
        <member name="M:Simulation.Activators.ActivateAllDelay(Simulation.ISchedulable[],System.Double)">
            <summary>
            Активирует все пассивные процессы в массиве с заданной задержкой времени.
            Активные и приостановленные процессы игнорируются
            </summary>
            <param name="act">Массив ссылок на процессы</param>
            <param name="dt">Задержка активации всех процессов массива</param>
        </member>
        <member name="M:Simulation.Activators.ActivateAllDelay(Simulation.List,System.Double)">
            <summary>
            Активирует все пассивные процессы в списке с заданной задержкой времени.
            Активные и приостановленные процессы, а также ячейки, не являющиеся процессами, игнорируются
            </summary>
            <param name="act">Список, в котором могут находиться процессы</param>
            <param name="dt">Задержка активации всех процессов из списка</param>
        </member>
        <member name="M:Simulation.Activators.ActivateAllPriorAt(Simulation.ISchedulable[],System.Double)">
            <summary>
            Активирует все пассивные процессы в массиве в заданный момент времени с приоритетом.
            Активные и приостановленные процессы игнорируются
            </summary>
            <param name="act">Массив ссылок на процессы</param>
            <param name="t">Время активации всех процессов массива</param>
        </member>
        <member name="M:Simulation.Activators.ActivateAllPriorAt(Simulation.List,System.Double)">
            <summary>
            Активирует все пассивные процессы в списке в заданный момент времени с приоритетом.
            Активные и приостановленные процессы, а также ячейки, не являющиеся процессами, игнорируются
            </summary>
            <param name="act">Список, в котором могут находиться процессы</param>
            <param name="t">Время активации всех процессов из списка</param>
        </member>
        <member name="M:Simulation.Activators.ActivateAllPriorDelay(Simulation.ISchedulable[],System.Double)">
            <summary>
            Активирует все пассивные процессы в массиве с заданной задержкой времени с приоритетом.
            Активные и приостановленные процессы игнорируются
            </summary>
            <param name="act">Массив ссылок на процессы</param>
            <param name="dt">Задержка активации всех процессов массива</param>
        </member>
        <member name="M:Simulation.Activators.ActivateAllPriorDelay(Simulation.List,System.Double)">
            <summary>
            Активирует все пассивные процессы в списке с заданной задержкой времени с приоритетом.
            Активные и приостановленные процессы, а также ячейки, не являющиеся процессами, игнорируются
            </summary>
            <param name="act">Список, в котором могут находиться процессы</param>
            <param name="dt">Задержка активации всех процессов из списка</param>
        </member>
        <member name="M:Simulation.Activators.ActivateFirst(Simulation.ISchedulable[])">
            <summary>
            Активирует первый пассивный процесс из массива. Остальные процессы не меняют состояние
            </summary>
            <param name="act">Массив процессов</param>
        </member>
        <member name="M:Simulation.Activators.ActivateFirst(Simulation.List)">
            <summary>
            Активирует первый пассивный процесс из списка. Остальные процессы не меняют состояние
            </summary>
            <param name="act">Список, в котором могут быть процессы. 
            Элементы списка, не являющиеся процессами, а также пассивные процессы, игнорируются</param>
        </member>
        <member name="M:Simulation.Activators.ActivateFirstAfter(Simulation.ISchedulable[],Simulation.ISchedulable)">
            <summary>
            Активирует первый пассивный процесс из массива после указанного. Остальные процессы не меняют состояние
            </summary>
            <param name="act">Массив процессов</param>
            <param name="act2">Процесс, после которого активируется первый подходящий процесс из массива</param>
        </member>
        <member name="M:Simulation.Activators.ActivateFirstAfter(Simulation.List,Simulation.ISchedulable)">
            <summary>
            Активирует первый пассивный процесс из списка после указанного. Остальные процессы не меняют состояние
            </summary>
            <param name="act">Список, в котором могут быть процессы. 
            Элементы списка, не являющиеся процессами, а также пассивные процессы, игнорируются</param>
            <param name="act2">Процесс, после которого активируется первый подходящий процесс из списка</param>
        </member>
        <member name="M:Simulation.Activators.ActivateFirstAt(Simulation.ISchedulable[],System.Double)">
            <summary>
            Активирует первый пассивный процесс из массива в заданный момент времени. Остальные процессы не меняют состояние
            </summary>
            <param name="act">Массив процессов</param>
            <param name="t">Время активации процесса</param>
        </member>
        <member name="M:Simulation.Activators.ActivateFirstAt(Simulation.List,System.Double)">
            <summary>
            Активирует первый пассивный процесс из списка в заданный момент времени. Остальные процессы не меняют состояние
            </summary>
            <param name="act">Список, в котором могут быть процессы. 
            Элементы списка, не являющиеся процессами, а также пассивные процессы, игнорируются</param>
            <param name="t">Время активации процесса</param>
        </member>
        <member name="M:Simulation.Activators.ActivateFirstBefore(Simulation.ISchedulable[],Simulation.ISchedulable)">
            <summary>
            Активирует первый пассивный процесс из массива перед указанным. Остальные процессы не меняют состояние
            </summary>
            <param name="act">Массив процессов</param>
            <param name="act2">Процесс, перед которым активируется первый подходящий процесс из массива</param>
        </member>
        <member name="M:Simulation.Activators.ActivateFirstBefore(Simulation.List,Simulation.ISchedulable)">
            <summary>
            Активирует первый пассивный процесс из списка перед указанным. Остальные процессы не меняют состояние
            </summary>
            <param name="act">Список, в котором могут быть процессы. 
            Элементы списка, не являющиеся процессами, а также пассивные процессы, игнорируются</param>
            <param name="act2">Процесс, перед которым активируется первый подходящий процесс из списка</param>
        </member>
        <member name="M:Simulation.Activators.ActivateFirstDelay(Simulation.ISchedulable[],System.Double)">
            <summary>
            Активирует первый пассивный процесс из массива с заданным интервалом времени. 
            Остальные процессы не меняют состояние
            </summary>
            <param name="act">Массив процессов</param>
            <param name="dt">Интервал времени для активации процесса</param>
        </member>
        <member name="M:Simulation.Activators.ActivateFirstDelay(Simulation.List,System.Double)">
            <summary>
            Активирует первый пассивный процесс из списка с заданным интервалом времени. 
            Остальные процессы не меняют состояние
            </summary>
            <param name="act">Список, в котором могут быть процессы. 
            Элементы списка, не являющиеся процессами, а также пассивные процессы, игнорируются</param>
            <param name="dt">Интервал времени для активации процесса</param>
        </member>
        <member name="M:Simulation.Activators.ActivateFirstPriorAt(Simulation.ISchedulable[],System.Double)">
            <summary>
            Активирует первый пассивный процесс из массива в заданный момент времени с приоритетом. 
            Остальные процессы не меняют состояние
            </summary>
            <param name="act">Массив процессов</param>
            <param name="t">Время активации процесса</param>
        </member>
        <member name="M:Simulation.Activators.ActivateFirstPriorAt(Simulation.List,System.Double)">
            <summary>
            Активирует первый пассивный процесс из списка в заданный момент времени с приоритетом. 
            Остальные процессы не меняют состояние
            </summary>
            <param name="act">Список, в котором могут быть процессы. 
            Элементы списка, не являющиеся процессами, а также пассивные процессы, игнорируются</param>
            <param name="t">Время активации процесса</param>
        </member>
        <member name="M:Simulation.Activators.ActivateFirstPriorDelay(Simulation.ISchedulable[],System.Double)">
            <summary>
            Активирует первый пассивный процесс из массива с заданным интервалом времени с приоритетом. 
            Остальные процессы не меняют состояние
            </summary>
            <param name="act">Массив процессов</param>
            <param name="dt">Интервал времени для активации процесса</param>
        </member>
        <member name="M:Simulation.Activators.ActivateFirstPriorDelay(Simulation.List,System.Double)">
            <summary>
            Активирует первый пассивный процесс из списка с заданным интервалом времени с приоритетом. 
            Остальные процессы не меняют состояние
            </summary>
            <param name="act">Список, в котором могут быть процессы. 
            Элементы списка, не являющиеся процессами, а также пассивные процессы, игнорируются</param>
            <param name="dt">Интервал времени для активации процесса</param>
        </member>
        <member name="T:Simulation.Random">
            <summary>
            Класс Random предоставляет генератор случайных чисел с возможностью получения последовательностей с различным распределением.
            <para>Фактически, является оболочкой вокруг стандартного генератора случайных чисел, 
            обеспечивающей возможность получения случайных чисел с различными распределениями</para>
            </summary>
        </member>
        <member name="M:Simulation.Random.#ctor">
            <summary>
            Конструктор. Инициализирует объект автоматически в зависимости от текущего системного времени
            </summary>
        </member>
        <member name="M:Simulation.Random.#ctor(System.Int32)">
            <summary>
            Конструктор. Инициализирует объект заданным начальным значением
            </summary>
            <param name="seed">Исходное значение</param>
        </member>
        <member name="F:Simulation.Random.HasNextNormal">
            <summary>
            Готова ли следующая величина нормального распределения
            </summary>
        </member>
        <member name="F:Simulation.Random.NextNormal">
            <summary>
            Следующая величина нормального распределения
            </summary>
        </member>
        <member name="F:Simulation.Random.Rnd">
            <summary>
            Стандартный генератор случайных чисел
            </summary>
        </member>
        <member name="M:Simulation.Random.Draw(System.Double)">
            <summary>
            Возвращает true с заданной вероятностью
            </summary>
            <param name="prob">Вероятность появления результата true</param>
            <returns>Логическое значение, равное true с вероятностью prob, и false с вероятностью 1 - prob</returns>
        </member>
        <member name="M:Simulation.Random.Erlang(System.Double,System.Int32)">
            <summary>
            Возвращает вещественную величину, распределенную в соответствии с законом Эрланга.
            Она равна сумме count величин, распределенных экспоненциально с математическим ожиданием mean каждая.
            </summary>
            <param name="mean">Математическое ожидание отдельного слагаемого</param>
            <param name="count">Количество слагаемых</param>
            <returns>Величина, распределенная в соответствии с законом Эрланга</returns>
        </member>
        <member name="M:Simulation.Random.Exponential(System.Double)">
            <summary>
            Возвращает экспоненциально распределенную вещественную величину
            с заданным математическим ожиданием
            </summary>
            <param name="mean">Математическое ожидание (для данного распределения оно равно стандартному отклонению)</param>
            <returns>Экспоненциально распределенная величина</returns>
        </member>
        <member name="M:Simulation.Random.NextFloat">
            <summary>
            Возвращает очередное псевдослучайное вещественное значение
            </summary>
            <returns>Равномерно распределенное вещественное значение в интервале [0, 1)</returns>
        </member>
        <member name="M:Simulation.Random.NextInt">
            <summary>
            Возвращает очередное псеводслучайное целочисленное значение 
            </summary>
            <returns>Равномерно распределенное целочисленное значение в интервале от 0 до 2^31 - 1</returns>
        </member>
        <member name="M:Simulation.Random.NextInt(System.Int32)">
            <summary>
            Возвращает очередное псеводслучайное целочисленное значение,
            ограниченное сверху
            </summary>
            <param name="max">Верхняя граница псевдослучайного значения</param>
            <returns>Расномерно распределенное целочисленное значение в интервале от 0 до max - 1</returns>
        </member>
        <member name="M:Simulation.Random.NextInt(System.Int32,System.Int32)">
            <summary>
            Возвращает очередное псеводслучайное целочисленное значение,
            ограниченное с двух сторон
            </summary>
            <param name="min">Нижняя граница псевдослучайного значения</param>
            <param name="max">Верхняя граница псеводслучайного значения</param>
            <returns>Расномерно распределенное целочисленное значение в интервале от min до max - 1</returns>
        </member>
        <member name="M:Simulation.Random.Normal(System.Double,System.Double)">
            <summary>
            Возвращает нормально распределенное вещественное значение с заданными
            значениями математического ожидания и стандартного отклонения
            </summary>
            <param name="mean">Математическое ожидание</param>
            <param name="deviation">Стандартное отклонение</param>
            <returns>Нормально распределенное вещественное значение</returns>
        </member>
        <member name="M:Simulation.Random.Poisson(System.Double)">
            <summary>
            Возвращает целочисленное значение, распределенное в соответствии с законом Пуассона
            </summary>
            <param name="mean">Математическое ожидание</param>
            <returns>Целочисленное значение, распределенно в соответствии с законом Пуассона</returns>
        </member>
        <member name="M:Simulation.Random.TableIndex(System.Double[])">
            <summary>
            Возвращает целочисленное значение, распределенное с вероятностями для каждого возможного значения, задаваемыми в массиве.
            Параметр-массив должен быть упорядочен по возрастанию.
            Например, если массив содержит значения (0.2, 0.6, 0.7, 0.9), то вероятности появления результатов будут следующими:
            0 - 0,2, 1 - 0,4, 2 - 0,1, 3 - 0,2, 4 - 0,1.
            </summary>
            <param name="table">Массив вероятностей</param>
            <returns>Целочисленное значение в интервале от 0 до table.Length</returns>
        </member>
        <member name="M:Simulation.Random.Triangular(System.Double,System.Double,System.Double)">
            <summary>
            Возвращает вещественную величину, распределенную треугольно
            </summary>
            <param name="min">Нижняя граница</param>
            <param name="moda">Мода, то есть значение, для которого плотность вероятности распределения максимальна</param>
            <param name="max">Верхняя граница</param>
            <returns>Треугольно распределенная величина</returns>
        </member>
        <member name="M:Simulation.Random.Uniform(System.Double,System.Double)">
            <summary>
            Возвращает очередное равномерно распределенное псеводслучайное вещественное значение
            </summary>
            <param name="min">Нижняя граница</param>
            <param name="max">Верхняя граница</param>
            <returns>Значение в диапазоне [min, max)</returns>
        </member>
    </members>
</doc>
