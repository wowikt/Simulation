using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Simulation
{
    /// <summary>
    /// Интерфейс ISchedulable является базовым для классов объектов, 
    /// для которых возможны манипуляции с уведомлениями о событиях 
    /// (удаление, перемещение и т. п.). Производный от IActivatable
    /// </summary>
    public interface ISchedulable : IActivatable
    {
        /// <summary>
        /// Указывает, находится ли процесс в пассивном или завершенном состоянии
        /// </summary>
        bool Idle
        {
            get;
        }

        /// <summary>
        /// Уведомление о событии, связанное с процессом
        /// </summary>
        SchedulableEventNotice Event
        {
            get;
            set;
        }

        /// <summary>
        /// Переводит процесс в пассивное состояние, удаляя его 
        /// запись уведомления о событии из календаря
        /// <para>Если процесс является текущим, управление передается 
        /// следующему по порядку процессу</para>
        /// </summary>
        void Passivate();

        /// <summary>
        /// Перемещает запись уведомления об активации процесса, 
        /// в том числе приостановленного, непосредственно после текущего.
        /// <para>Если процесс находится в активном состоянии (то есть, является текущим), 
        /// ничего не делает</para>
        /// </summary>
        void Reactivate();

        /// <summary>
        /// Перемещает запись уведомления об активации процесса 
        /// непосредственно после записи указанного процесса
        /// <para>Если процесс находится в пассивном состоянии, создает 
        /// новую запись уведомления</para>
        /// <para>Если процесс является активным, он приостанавливается</para>
        /// <para>Если процесс-параметр находится в пассивном состоянии, 
        /// порождается исключение</para>
        /// </summary>
        /// <param name="act">Процесс, перед которым следует активировать данный</param>
        void ReactivateAfter(ISchedulable act);

        /// <summary>
        /// Перемещает запись уведомления об активации процесса непосредственно 
        /// перед записью указанного процесса
        /// <para>Если процесс находится в пассивном состоянии, создает 
        /// новую запись уведомления</para>
        /// <para>Если процесс является активным, он приостанавливается</para>
        /// <para>Если процесс-параметр находится в пассивном состоянии, 
        /// порождается исключение</para>
        /// </summary>
        /// <param name="act">Процесс, перед которым следует активировать данный</param>
        void ReactivateBefore(ISchedulable act);

        /// <summary>
        /// Перемещает запись уведомления об активации процесса на указанное время
        /// <para>Если процесс находится в пассивном состоянии, создает 
        /// новую запись уведомления</para>
        /// <para>Если процесс является активным, он приостанавливается</para>
        /// </summary>
        /// <param name="t">Имитационное время активации процесса</param>
        void ReactivateAt(double t);

        /// <summary>
        /// Перемещает запись уведомления об активации процесса непосредственно 
        /// перед записью указанного процесса
        /// <para>Если процесс находится в пассивном состоянии, создает новую 
        /// запись уведомления</para>
        /// <para>Если процесс является активным, он приостанавливается</para>
        /// <para>Если процесс-параметр находится в пассивном состоянии, порождается 
        /// исключение</para>
        /// </summary>
        /// <param name="dt">Процесс, перед которым следует активировать данный</param>
        void ReactivateDelay(double dt);

        /// <summary>
        /// Перемещает запись уведомления об активации процесса на 
        /// указанное время с приоритетом.
        /// <para>Если процесс находится в пассивном состоянии, создает 
        /// новую запись уведомления</para>
        /// <para>Если процесс является активным, он приостанавливается</para>
        /// </summary>
        /// <param name="t">Имитационное время активации процесса</param>
        void ReactivatePriorAt(double t);

        /// <summary>
        /// Перемещает запись уведомления об активации процесса с указанной 
        /// задержкой времени относительно текущего процесса с приоритетом.
        /// <para>Если процесс находится в пассивном состоянии, создает 
        /// новую запись уведомления</para>
        /// <para>Если процесс является активным, он приостанавливается</para>
        /// </summary>
        /// <param name="dt">Имитационное время активации процесса</param>
        void ReactivatePriorDelay(double dt);

        /// <summary>
        /// Постановка процесса в очередь и перевод его в режим ожидания
        /// </summary>
        /// <param name="l">Очередь ожидания</param>
        bool Wait(Queue l);
    }
}
